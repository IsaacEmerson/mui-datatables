{"version":3,"file":"index.js","sources":["../src/components/Popover.js","../src/components/TableFilter.js","../src/components/TableViewCol.js","../src/components/TableSearch.js","../src/styled.js","../src/utils.js","../src/components/TableToolbar.js","../src/components/TableToolbarSelect.js","../src/components/TableFilterList.js","../src/components/TableBodyCell.js","../src/components/TableBodyRow.js","../src/components/TableSelectCell.js","../src/components/TableBody.js","../src/components/TableResize.js","../src/components/TableHeadRow.js","../src/components/TableHeadCell.js","../src/components/TableHead.js","../src/components/TablePagination.js","../src/components/TableFooter.js","../src/textLabels.js","../src/MUIDataTable.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiPopover from '@material-ui/core/Popover';\nimport { findDOMNode } from 'react-dom';\n\nclass Popover extends React.Component {\n  state = {\n    open: false,\n  };\n\n  componentWillMount() {\n    this.anchorEl = null;\n  }\n\n  componentDidMount() {\n    if (this.props.refClose) {\n      this.props.refClose(this.handleRequestClose);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    /*\n     * Update Popover position if a filter removes data from the table because\n     * it affects the window height which would cause the Popover to in the wrong place\n     */\n    if (this.state.open === true) {\n      this.anchorEl = findDOMNode(this.anchorEl);\n      this.popoverActions.updatePosition();\n    }\n  }\n\n  handleClick = () => {\n    this.anchorEl = findDOMNode(this.anchorEl);\n    this.setState({ open: true });\n  };\n\n  handleRequestClose = cb => {\n    this.setState({ open: false }, cb && typeof cb === 'function' ? cb() : () => {});\n  };\n\n  handleOnExit = () => {\n    if (this.props.refExit) {\n      this.props.refExit();\n    }\n  };\n\n  render() {\n    const { className, placement, trigger, refExit, content, ...providedProps } = this.props;\n\n    const transformOriginSpecs = {\n      vertical: 'top',\n      horizontal: 'center',\n    };\n\n    const anchorOriginSpecs = {\n      vertical: 'bottom',\n      horizontal: 'center',\n    };\n\n    const triggerEl = React.cloneElement(<span>{trigger}</span>, {\n      key: 'content',\n      ref: el => (this.anchorEl = el),\n      onClick: () => {\n        if (trigger.props.onClick) trigger.props.onClick();\n        this.handleClick();\n      },\n    });\n\n    return (\n      <React.Fragment>\n        <MuiPopover\n          action={actions => (this.popoverActions = actions)}\n          elevation={2}\n          open={this.state.open}\n          onClose={this.handleRequestClose}\n          onExited={this.handleOnExit}\n          anchorEl={this.anchorEl}\n          ref={el => this.popoverEl}\n          anchorOrigin={anchorOriginSpecs}\n          transformOrigin={transformOriginSpecs}\n          {...providedProps}>\n          {content}\n        </MuiPopover>\n        {triggerEl}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Popover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Grid, GridList, GridListTile } from '@material-ui/core';\n\nexport const defaultFilterStyles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    padding: '24px 24px 36px 24px',\n    fontFamily: 'Roboto',\n  },\n  header: {\n    flex: '0 0 auto',\n    marginBottom: '16px',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  title: {\n    display: 'inline-block',\n    marginLeft: '7px',\n    color: theme.palette.text.primary,\n    fontSize: '14px',\n    fontWeight: 500,\n  },\n  noMargin: {\n    marginLeft: '0px',\n  },\n  reset: {\n    alignSelf: 'left',\n  },\n  resetLink: {\n    marginLeft: '16px',\n    fontSize: '12px',\n    cursor: 'pointer',\n  },\n  filtersSelected: {\n    alignSelf: 'right',\n  },\n  /* checkbox */\n  checkboxListTitle: {\n    marginLeft: '7px',\n    marginBottom: '8px',\n    fontSize: '14px',\n    color: theme.palette.text.secondary,\n    textAlign: 'left',\n    fontWeight: 500,\n  },\n  checkboxFormGroup: {\n    marginTop: '8px',\n  },\n  checkboxFormControl: {\n    margin: '0px',\n  },\n  checkboxFormControlLabel: {\n    fontSize: '15px',\n    marginLeft: '8px',\n    color: theme.palette.text.primary,\n  },\n  checkboxIcon: {\n    width: '32px',\n    height: '32px',\n  },\n  checkbox: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n    },\n  },\n  checked: {},\n  /* selects */\n  selectRoot: {\n    display: 'flex',\n    marginTop: '16px',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    width: '100%',\n    height: '80%',\n    justifyContent: 'space-between',\n  },\n  selectFormControl: {\n    flex: '1 1 calc(50% - 24px)',\n  },\n  /* textField */\n  textFieldRoot: {\n    display: 'flex',\n    marginTop: '16px',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    width: '100%',\n  },\n  textFieldFormControl: {\n    flex: '1 1 calc(50% - 24px)',\n  },\n});\n\nclass TableFilter extends React.Component {\n  static propTypes = {\n    /** Data used to populate filter dropdown/checkbox */\n    filterData: PropTypes.array.isRequired,\n    /** Data selected to be filtered against dropdown/checkbox */\n    filterList: PropTypes.array.isRequired,\n    /** Options used to describe table */\n    options: PropTypes.object.isRequired,\n    /** Callback to trigger filter update */\n    onFilterUpdate: PropTypes.func,\n    /** Callback to trigger filter reset */\n    onFilterRest: PropTypes.func,\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  handleCheckboxChange = (index, value, column) => {\n    this.props.onFilterUpdate(index, value, column, 'checkbox');\n  };\n\n  handleDropdownChange = (event, index, column) => {\n    const labelFilterAll = this.props.options.textLabels.filter.all;\n    const value = event.target.value === labelFilterAll ? '' : event.target.value;\n    this.props.onFilterUpdate(index, value, column, 'dropdown');\n  };\n\n  handleMultiselectChange = (index, value, column) => {\n    this.props.onFilterUpdate(index, value, column, 'multiselect');\n  };\n\n  handleTextFieldChange = (event, index, column) => {\n    this.props.onFilterUpdate(index, event.target.value, column, 'textField');\n  };\n\n  renderCheckbox(column, index) {\n    const { classes, filterData, filterList } = this.props;\n\n    return (\n      <GridListTile key={index} cols={2}>\n        <FormGroup>\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" className={classes.checkboxListTitle}>\n              {column.label}\n            </Typography>\n          </Grid>\n          <Grid container>\n            {filterData[index].map((filterValue, filterIndex) => (\n              <Grid item key={filterIndex}>\n                <FormControlLabel\n                  key={filterIndex}\n                  classes={{\n                    root: classes.checkboxFormControl,\n                    label: classes.checkboxFormControlLabel,\n                  }}\n                  control={\n                    <Checkbox\n                      className={classes.checkboxIcon}\n                      onChange={this.handleCheckboxChange.bind(null, index, filterValue, column.name)}\n                      checked={filterList[index].indexOf(filterValue) >= 0 ? true : false}\n                      classes={{\n                        root: classes.checkbox,\n                        checked: classes.checked,\n                      }}\n                      value={filterValue != null ? filterValue.toString() : ''}\n                    />\n                  }\n                  label={filterValue}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </FormGroup>\n      </GridListTile>\n    );\n  }\n\n  renderSelect(column, index) {\n    const { classes, filterData, filterList, options } = this.props;\n    const textLabels = options.textLabels.filter;\n\n    return (\n      <GridListTile key={index} cols={1}>\n        <div className={classes.selectRoot}>\n          <FormControl className={classes.selectFormControl} key={index}>\n            <InputLabel htmlFor={column.name}>{column.label}</InputLabel>\n            <Select\n              value={filterList[index].toString() || textLabels.all}\n              name={column.name}\n              onChange={event => this.handleDropdownChange(event, index, column.name)}\n              input={<Input name={column.name} id={column.name} />}>\n              <MenuItem value={textLabels.all} key={0}>\n                {textLabels.all}\n              </MenuItem>\n              {filterData[index].map((filterValue, filterIndex) => (\n                <MenuItem value={filterValue} key={filterIndex + 1}>\n                  {filterValue != null ? filterValue.toString() : ''}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n      </GridListTile>\n    );\n  }\n\n  renderTextField(column, index) {\n    const { classes, filterList } = this.props;\n\n    return (\n      <GridListTile key={index} cols={1}>\n        <div className={classes.textFieldRoot}>\n          <FormControl className={classes.textFieldFormControl} key={index}>\n            <TextField\n              label={column.label}\n              value={filterList[index].toString() || ''}\n              onChange={event => this.handleTextFieldChange(event, index, column.name)}\n            />\n          </FormControl>\n        </div>\n      </GridListTile>\n    );\n  }\n\n  renderMultiselect(column, index) {\n    const { classes, filterData, filterList, options } = this.props;\n\n    return (\n      <GridListTile key={index} cols={1}>\n        <div className={classes.selectRoot}>\n          <FormControl className={classes.selectFormControl} key={index}>\n            <InputLabel htmlFor={column.name}>{column.label}</InputLabel>\n            <Select\n              multiple\n              value={filterList[index] || []}\n              renderValue={selected => selected.join(', ')}\n              name={column.name}\n              onChange={event => this.handleMultiselectChange(index, event.target.value, column.name)}\n              input={<Input name={column.name} id={column.name} />}>\n              {filterData[index].map((filterValue, filterIndex) => (\n                <MenuItem value={filterValue} key={filterIndex + 1}>\n                  <Checkbox\n                    checked={filterList[index].indexOf(filterValue) >= 0 ? true : false}\n                    value={filterValue != null ? filterValue.toString() : ''}\n                    className={classes.checkboxIcon}\n                    classes={{\n                      root: classes.checkbox,\n                      checked: classes.checked,\n                    }}\n                  />\n                  <ListItemText primary={filterValue} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n      </GridListTile>\n    );\n  }\n\n  render() {\n    const { classes, columns, options, onFilterReset } = this.props;\n    const textLabels = options.textLabels.filter;\n    const filterGridColumns = columns.filter(col => col.filter).length === 1 ? 1 : 2;\n\n    return (\n      <div className={classes.root}>\n        <div className={classes.header}>\n          <div className={classes.reset}>\n            <Typography\n              variant=\"body2\"\n              className={classNames({\n                [classes.title]: true,\n              })}>\n              {textLabels.title}\n            </Typography>\n            <Button\n              color=\"primary\"\n              className={classes.resetLink}\n              tabIndex={0}\n              aria-label={textLabels.reset}\n              onClick={onFilterReset}>\n              {textLabels.reset}\n            </Button>\n          </div>\n          <div className={classes.filtersSelected} />\n        </div>\n        <GridList cellHeight=\"auto\" cols={filterGridColumns} cellHeight={70} spacing={34}>\n          {columns.map((column, index) => {\n            if (column.filter) {\n              const filterType = column.filterType || options.filterType;\n              return filterType === 'checkbox'\n                ? this.renderCheckbox(column, index)\n                : filterType === 'multiselect'\n                ? this.renderMultiselect(column, index)\n                : filterType === 'textField'\n                ? this.renderTextField(column, index)\n                : this.renderSelect(column, index);\n            }\n          })}\n        </GridList>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(defaultFilterStyles, { name: 'MUIDataTableFilter' })(TableFilter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withStyles } from '@material-ui/core/styles';\n\nexport const defaultViewColStyles = theme => ({\n  root: {\n    padding: '16px 24px 16px 24px',\n    fontFamily: 'Roboto',\n  },\n  title: {\n    marginLeft: '-7px',\n    fontSize: '14px',\n    color: theme.palette.text.secondary,\n    textAlign: 'left',\n    fontWeight: 500,\n  },\n  formGroup: {\n    marginTop: '8px',\n  },\n  formControl: {},\n  checkbox: {\n    padding: '0px',\n    width: '32px',\n    height: '32px',\n  },\n  checkboxRoot: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n    },\n  },\n  checked: {},\n  label: {\n    fontSize: '15px',\n    marginLeft: '8px',\n    color: theme.palette.text.primary,\n  },\n});\n\nclass TableViewCol extends React.Component {\n  static propTypes = {\n    /** Columns used to describe table */\n    columns: PropTypes.array.isRequired,\n    /** Options used to describe table */\n    options: PropTypes.object.isRequired,\n    /** Callback to trigger View column update */\n    onColumnUpdate: PropTypes.func,\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  handleColChange = index => {\n    this.props.onColumnUpdate(index);\n  };\n\n  render() {\n    const { classes, columns, options } = this.props;\n    const textLabels = options.textLabels.viewColumns;\n\n    return (\n      <FormControl component={'fieldset'} className={classes.root} aria-label={textLabels.titleAria}>\n        <Typography variant=\"caption\" className={classes.title}>\n          {textLabels.title}\n        </Typography>\n        <FormGroup className={classes.formGroup}>\n          {columns.map((column, index) => {\n            return (\n              column.display !== 'excluded' &&\n              column.viewColumns !== false && (\n                <FormControlLabel\n                  key={index}\n                  classes={{\n                    root: classes.formControl,\n                    label: classes.label,\n                  }}\n                  control={\n                    <Checkbox\n                      className={classes.checkbox}\n                      classes={{\n                        root: classes.checkboxRoot,\n                        checked: classes.checked,\n                      }}\n                      onChange={this.handleColChange.bind(null, index)}\n                      checked={column.display === 'true'}\n                      value={column.name}\n                    />\n                  }\n                  label={column.label}\n                />\n              )\n            );\n          })}\n        </FormGroup>\n      </FormControl>\n    );\n  }\n}\n\nexport default withStyles(defaultViewColStyles, { name: 'MUIDataTableViewCol' })(TableViewCol);\n","import React from 'react';\nimport Grow from '@material-ui/core/Grow';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultSearchStyles = theme => ({\n  main: {\n    display: 'flex',\n    flex: '1 0 auto',\n  },\n  searchIcon: {\n    color: 'white',\n    marginTop: '10px',\n    marginRight: '8px',\n  },\n\n  clearIcon: {\n    color: 'white',\n  },\n  searchInput: {\n    flex: '1 0',\n    position: 'relative',\n    backgroundColor: 'transparent',\n    color: 'white',\n    borderBottom: '1px solid white',\n    fontSize: 16,\n    width: 'auto',\n    padding: '6px 0px',\n    marginTop: '-16px',\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\n    '&:focus': {\n      borderColor: 'white',\n      color: 'white',\n    },\n  },\n});\n\nclass TableSearch extends React.Component {\n  handleTextChange = event => {\n    const { onSearchChange } = this.props.options;\n\n    if (onSearchChange) {\n      onSearchChange(event.target.value);\n    }\n\n    this.props.onSearch(event.target.value);\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown, false);\n  }\n\n  onKeyDown = event => {\n    if (event.keyCode === 27) {\n      this.props.onHide();\n    }\n  };\n\n  render() {\n    const { classes, options, onHide, initialSearchText } = this.props;\n\n    return (\n      <Grow appear in={true} timeout={300}>\n        <div className={classes.main} ref={el => (this.rootRef = el)}>\n          <SearchIcon className={classes.searchIcon} />\n          <InputBase\n            id=\"search-input\"\n            classes={{\n              input: classes.searchInput,\n            }}\n            // InputProps={{\n            //   'aria-label': options.textLabels.toolbar.search,\n            // }}\n            defaultValue={initialSearchText}\n            onChange={this.handleTextChange}\n            fullWidth={true}\n            inputRef={el => (this.searchField = el)}\n          />\n          <IconButton onClick={onHide}>\n            <ClearIcon className={classes.clearIcon} />\n          </IconButton>\n        </div>\n      </Grow>\n    );\n  }\n}\n\nexport default withStyles(defaultSearchStyles, { name: 'MUIDataTableSearch' })(TableSearch);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport merge from 'lodash.merge';\nimport { withStyles } from '@material-ui/core/styles';\n\n/*\n *  Material-UI does not yet support ability to grab props within style()\n *  https://github.com/mui-org/material-ui/issues/7633\n *\n *  This is a workaround provided from the thread\n */\n\nconst styles = (theme, props, style) => {\n  return typeof style === 'function' ? style(theme, props) : style;\n};\n\nclass StyledComponent extends React.Component {\n  static propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n  };\n\n  render() {\n    const { classes, className = '', WrappedComponent, ...passThroughProps } = this.props;\n\n    return <WrappedComponent classes={classes} className={className} {...passThroughProps} />;\n  }\n}\n\nconst styled = (WrappedComponent, customProps = {}) => {\n  return (style, options = {}) => {\n    const HOCProps = WrappedComponent => {\n      return class _HOCProps extends React.Component {\n        constructor(props) {\n          super(props);\n          this.FinalComponent = withStyles(theme => {\n            const defaultStyles = styles(theme, props, style);\n            const mergedStyles = merge(defaultStyles, props.styles ? props.styles : {});\n            return mergedStyles;\n          }, options)(StyledComponent);\n        }\n\n        render() {\n          const { styles, ...otherProps } = this.props;\n          return <this.FinalComponent {...customProps} {...otherProps} WrappedComponent={WrappedComponent} />;\n        }\n      };\n    };\n    return HOCProps(WrappedComponent);\n  };\n};\n\nexport default styled;\n","function buildMap(rows) {\n  return rows.reduce((accum, { dataIndex }) => {\n    accum[dataIndex] = true;\n    return accum;\n  }, {});\n}\n\nfunction getCollatorComparator() {\n  if (!!Intl) {\n    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n    return collator.compare;\n  }\n\n  const fallbackComparator = (a, b) => a.localeCompare(b);\n  return fallbackComparator;\n}\n\nfunction sortCompare(order) {\n  return (a, b) => {\n    if (a.data === null) a.data = '';\n    if (b.data === null) b.data = '';\n    return (\n      (typeof a.data.localeCompare === 'function' ? a.data.localeCompare(b.data) : a.data - b.data) *\n      (order === 'asc' ? 1 : -1)\n    );\n  };\n}\n\nfunction createCSVDownload(columns, data, options) {\n  const replaceDoubleQuoteInString = columnData =>\n    typeof columnData === 'string' ? columnData.replace(/\\\"/g, '\"\"') : columnData;\n\n  const buildHead = columns => {\n    return (\n      columns\n        .reduce(\n          (soFar, column) =>\n            column.download\n              ? soFar + '\"' + replaceDoubleQuoteInString(column.name) + '\"' + options.downloadOptions.separator\n              : soFar,\n          '',\n        )\n        .slice(0, -1) + '\\r\\n'\n    );\n  };\n  const CSVHead = buildHead(columns);\n\n  const buildBody = data => {\n    return data\n      .reduce(\n        (soFar, row) =>\n          soFar +\n          '\"' +\n          row.data\n            .filter((_, index) => columns[index].download)\n            .map(columnData => replaceDoubleQuoteInString(columnData))\n            .join('\"' + options.downloadOptions.separator + '\"') +\n          '\"\\r\\n',\n        [],\n      )\n      .trim();\n  };\n  const CSVBody = buildBody(data);\n\n  const csv = options.onDownload\n    ? options.onDownload(buildHead, buildBody, columns, data)\n    : `${CSVHead}${CSVBody}`.trim();\n  const blob = new Blob([csv], { type: 'text/csv' });\n\n  /* taken from react-csv */\n  if (navigator && navigator.msSaveOrOpenBlob) {\n    navigator.msSaveOrOpenBlob(blob, options.downloadOptions.filename);\n  } else {\n    const dataURI = `data:text/csv;charset=utf-8,${csv}`;\n\n    const URL = window.URL || window.webkitURL;\n    const downloadURI = typeof URL.createObjectURL === 'undefined' ? dataURI : URL.createObjectURL(blob);\n\n    let link = document.createElement('a');\n    link.setAttribute('href', downloadURI);\n    link.setAttribute('download', options.downloadOptions.filename);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n\nexport { buildMap, getCollatorComparator, sortCompare, createCSVDownload };\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Popover from './Popover';\nimport TableFilter from './TableFilter';\nimport TableViewCol from './TableViewCol';\nimport TableSearch from './TableSearch';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\nimport PrintIcon from '@material-ui/icons/Print';\nimport ViewColumnIcon from '@material-ui/icons/ViewColumn';\nimport FilterIcon from '@material-ui/icons/FilterList';\nimport ReactToPrint from 'react-to-print';\nimport styled from '../styled';\nimport { createCSVDownload } from '../utils';\n\nexport const defaultToolbarStyles = (theme, props) => ({\n  root: {},\n  paperHeader: {\n    width: '100%',\n    color: 'white',\n    padding: '25px',\n    marginTop: '-35px',\n    marginBottom: '30px',\n    webkitBoxShadow: '0px 5px 20px -1px rgba(106,27,154,0.4)',\n    mozBoxShadow: '0px 5px 20px -1px rgba(106,27,154,0.4)',\n    boxShadow: '0px 5px 20px -1px rgba(106,27,154,0.4)',\n    display: 'flex',\n    direction: 'row',\n    alignItems: 'center',\n  },\n  left: {\n    flex: '1 1 auto',\n  },\n  iconWhite: { color: 'white' },\n  actions: {\n    flex: '1 1 auto',\n    textAlign: 'right',\n  },\n  titleRoot: { marginLeft: 5 },\n  titleText: { color: 'white' },\n  icon: {\n    '&:hover': {\n      color: '',\n    },\n  },\n  iconActive: {\n    color: theme.palette.primary.main,\n  },\n  filterPaper: {\n    maxWidth: '50%',\n  },\n  searchIcon: {\n    display: 'inline-flex',\n    marginTop: '10px',\n    marginRight: '8px',\n  },\n  ...(props.options.responsive ? { ...responsiveToolbarStyles(theme) } : {}),\n});\n\nexport const responsiveToolbarStyles = theme => ({\n  [theme.breakpoints.down('sm')]: {\n    titleRoot: { marginLeft: 5 },\n    titleText: {\n      color: 'white',\n      fontSize: '16px',\n    },\n    spacer: {\n      display: 'none',\n    },\n    left: {\n      // flex: \"1 1 40%\",\n      padding: '8px 0px',\n    },\n    actions: {\n      // flex: \"1 1 60%\",\n      textAlign: 'right',\n    },\n  },\n  [theme.breakpoints.down('xs')]: {\n    root: {\n      display: 'block',\n    },\n    left: {\n      padding: '8px 0px 0px 0px',\n    },\n    titleText: {\n      textAlign: 'center',\n    },\n    actions: {\n      textAlign: 'center',\n    },\n  },\n  '@media screen and (max-width: 480px)': {},\n});\n\nclass TableToolbar extends React.Component {\n  state = {\n    iconActive: null,\n    showSearch: Boolean(this.props.searchText || this.props.options.searchText),\n    searchText: this.props.searchText || null,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.searchText !== prevProps.searchText) {\n      this.setState({ searchText: this.props.searchText });\n    }\n  }\n\n  handleCSVDownload = () => {\n    const { data, columns, options } = this.props;\n    createCSVDownload(columns, data, options);\n  };\n\n  setActiveIcon = iconName => {\n    this.setState(() => ({\n      showSearch: this.isSearchShown(iconName),\n      iconActive: iconName,\n    }));\n  };\n\n  isSearchShown = iconName => {\n    let nextVal = false;\n    if (this.state.showSearch) {\n      if (this.state.searchText) {\n        nextVal = true;\n      } else {\n        const { onSearchClose } = this.props.options;\n        if (onSearchClose) onSearchClose();\n        nextVal = false;\n      }\n    } else if (iconName === 'search') {\n      nextVal = this.showSearch();\n    }\n    return nextVal;\n  };\n\n  getActiveIcon = (styles, iconName) => {\n    return this.state.iconActive !== iconName ? styles.icon : styles.iconActive;\n  };\n\n  showSearch = () => {\n    !!this.props.options.onSearchOpen && this.props.options.onSearchOpen();\n    this.props.setTableAction('onSearchOpen');\n    return true;\n  };\n\n  hideSearch = () => {\n    const { onSearchClose } = this.props.options;\n\n    if (onSearchClose) onSearchClose();\n    this.props.searchTextUpdate(null);\n\n    this.setState(() => ({\n      iconActive: null,\n      showSearch: false,\n      searchText: null,\n    }));\n\n    this.searchButton.focus();\n  };\n\n  handleSearch = value => {\n    this.setState({ searchText: value });\n    this.props.searchTextUpdate(value);\n  };\n\n  render() {\n    const {\n      data,\n      options,\n      classes,\n      columns,\n      filterData,\n      filterList,\n      filterUpdate,\n      resetFilters,\n      toggleViewColumn,\n      title,\n      color,\n      tableRef,\n    } = this.props;\n\n    const { search, downloadCsv, print, viewColumns, filterTable } = options.textLabels.toolbar;\n    const { showSearch, searchText } = this.state;\n\n    return (\n      <Toolbar className={classes.root} role={'toolbar'} aria-label={'Table Toolbar'}>\n        <Paper className={classes.paperHeader} style={{ backgroundColor: color || '#6A1B9A' }}>\n          <div className={classes.left}>\n            {showSearch === true ? (\n              <TableSearch\n                searchText={searchText}\n                onSearch={this.handleSearch}\n                onHide={this.hideSearch}\n                options={options}\n              />\n            ) : typeof title !== 'string' ? (\n              title\n            ) : (\n              <div className={classes.titleRoot} aria-hidden={'true'}>\n                <Typography variant=\"h6\" className={classes.titleText}>\n                  {title}\n                </Typography>\n              </div>\n            )}\n          </div>\n          <div className={classes.actions}>\n            {options.search && (\n              <Tooltip title={search} disableFocusListener>\n                <IconButton\n                  aria-label={search}\n                  buttonRef={el => (this.searchButton = el)}\n                  classes={{ root: this.getActiveIcon(classes, 'search') }}\n                  onClick={this.setActiveIcon.bind(null, 'search')}>\n                  <SearchIcon className={classes.iconWhite} />\n                </IconButton>\n              </Tooltip>\n            )}\n            {options.download && (\n              <Tooltip title={downloadCsv}>\n                <IconButton aria-label={downloadCsv} classes={{ root: classes.icon }} onClick={this.handleCSVDownload}>\n                  <DownloadIcon className={classes.iconWhite} />\n                </IconButton>\n              </Tooltip>\n            )}\n            {options.print && (\n              <span>\n                <ReactToPrint\n                  trigger={() => (\n                    <Tooltip title={print}>\n                      <IconButton aria-label={print} classes={{ root: classes.icon }}>\n                        <PrintIcon className={classes.iconWhite} />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  content={() => this.props.tableRef()}\n                />\n              </span>\n            )}\n            {options.viewColumns && (\n              <Popover\n                refExit={this.setActiveIcon.bind(null)}\n                trigger={\n                  <Tooltip title={viewColumns} disableFocusListener>\n                    <IconButton\n                      aria-label={viewColumns}\n                      classes={{ root: this.getActiveIcon(classes, 'viewcolumns') }}\n                      onClick={this.setActiveIcon.bind(null, 'viewcolumns')}>\n                      <ViewColumnIcon className={classes.iconWhite} />\n                    </IconButton>\n                  </Tooltip>\n                }\n                content={\n                  <TableViewCol data={data} columns={columns} options={options} onColumnUpdate={toggleViewColumn} />\n                }\n              />\n            )}\n            {options.filter && (\n              <Popover\n                refExit={this.setActiveIcon.bind(null)}\n                classes={{ paper: classes.filterPaper }}\n                trigger={\n                  <Tooltip title={filterTable} disableFocusListener>\n                    <IconButton\n                      aria-label={filterTable}\n                      classes={{ root: this.getActiveIcon(classes, 'filter') }}\n                      onClick={this.setActiveIcon.bind(null, 'filter')}>\n                      <FilterIcon className={classes.iconWhite} />\n                    </IconButton>\n                  </Tooltip>\n                }\n                content={\n                  <TableFilter\n                    columns={columns}\n                    options={options}\n                    filterList={filterList}\n                    filterData={filterData}\n                    onFilterUpdate={filterUpdate}\n                    onFilterReset={resetFilters}\n                  />\n                }\n              />\n            )}\n            {options.customToolbar && options.customToolbar()}\n          </div>\n        </Paper>\n      </Toolbar>\n    );\n  }\n}\n\nexport default styled(TableToolbar)(defaultToolbarStyles, { name: 'MUIDataTableToolbar' });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultToolbarSelectStyles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    flex: '1 1 100%',\n    display: 'flex',\n    position: 'relative',\n    zIndex: 120,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n  },\n  title: {\n    paddingLeft: '26px',\n  },\n  iconButton: {\n    marginRight: '24px',\n  },\n  deleteIcon: {},\n});\n\nclass TableToolbarSelect extends React.Component {\n  static propTypes = {\n    /** Options used to describe table */\n    options: PropTypes.object.isRequired,\n    /** Current row selected or not */\n    rowSelected: PropTypes.bool,\n    /** Callback to trigger selected rows delete */\n    onRowsDelete: PropTypes.func,\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  /**\n   * @param {number[]} selectedRows Array of rows indexes that are selected, e.g. [0, 2] will select first and third rows in table\n   */\n  handleCustomSelectedRows = selectedRows => {\n    if (!Array.isArray(selectedRows)) {\n      throw new TypeError(`\"selectedRows\" must be an \"array\", but it's \"${typeof selectedRows}\"`);\n    }\n\n    if (selectedRows.some(row => typeof row !== 'number')) {\n      throw new TypeError(`Array \"selectedRows\" must contain only numbers`);\n    }\n\n    const { options } = this.props;\n    if (selectedRows.length > 1 && options.selectableRows === 'single') {\n      throw new Error('Can not select more than one row when \"selectableRows\" is \"single\"');\n    }\n    this.props.selectRowUpdate('custom', selectedRows);\n  };\n\n  render() {\n    const { classes, onRowsDelete, selectedRows, options, displayData } = this.props;\n    const textLabels = options.textLabels.selectedRows;\n\n    return (\n      <Paper className={classes.root}>\n        <div>\n          <Typography variant=\"subtitle1\" className={classes.title}>\n            {selectedRows.data.length} {textLabels.text}\n          </Typography>\n        </div>\n        {options.customToolbarSelect ? (\n          options.customToolbarSelect(selectedRows, displayData, this.handleCustomSelectedRows)\n        ) : (\n          <Tooltip title={textLabels.delete}>\n            <IconButton className={classes.iconButton} onClick={onRowsDelete} aria-label={textLabels.deleteAria}>\n              <DeleteIcon className={classes.deleteIcon} />\n            </IconButton>\n          </Tooltip>\n        )}\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(defaultToolbarSelectStyles, { name: 'MUIDataTableToolbarSelect' })(TableToolbarSelect);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultFilterListStyles = {\n  root: {\n    display: 'flex',\n    justifyContent: 'left',\n    flexWrap: 'wrap',\n    margin: '0px 16px 0px 16px',\n  },\n  chip: {\n    margin: '8px 8px 0px 0px',\n  },\n};\n\nclass TableFilterList extends React.Component {\n  static propTypes = {\n    /** Data used to filter table against */\n    filterList: PropTypes.array.isRequired,\n    /** Filter List value renderers */\n    filterListRenderers: PropTypes.array.isRequired,\n    /** Columns used to describe table */\n    columnNames: PropTypes.PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.shape({ name: PropTypes.string.isRequired })]),\n    ).isRequired,\n    /** Callback to trigger filter update */\n    onFilterUpdate: PropTypes.func,\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  render() {\n    const { classes, filterList, filterUpdate, filterListRenderers, columnNames } = this.props;\n\n    return (\n      <div className={classes.root}>\n        {filterList.map((item, index) =>\n          item.map((data, colIndex) => (\n            <Chip\n              label={filterListRenderers[index](data)}\n              key={colIndex}\n              onDelete={filterUpdate.bind(null, index, data, columnNames[index].name, 'checkbox')}\n              className={classes.chip}\n            />\n          )),\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(defaultFilterListStyles, { name: 'MUIDataTableFilterList' })(TableFilterList);\n","import React from 'react';\nimport classNames from 'classnames';\nimport TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultBodyCellStyles = theme => ({\n  root: {},\n  cellHide: {\n    display: 'none',\n  },\n  cellStacked: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'inline-block',\n      backgroundColor: theme.palette.background.paper,\n      fontSize: '16px',\n      height: '24px',\n      width: 'calc(50% - 80px)',\n      whiteSpace: 'nowrap',\n    },\n  },\n  responsiveStacked: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'inline-block',\n      fontSize: '16px',\n      width: 'calc(50% - 80px)',\n      whiteSpace: 'nowrap',\n      height: '24px',\n    },\n  },\n});\n\nclass TableBodyCell extends React.Component {\n  handleClick = event => {\n    const { colIndex, options, children, dataIndex, rowIndex } = this.props;\n    if (options.onCellClick) {\n      options.onCellClick(children, { colIndex, rowIndex, dataIndex, event });\n    }\n  };\n\n  render() {\n    const {\n      children,\n      classes,\n      colIndex,\n      columnHeader,\n      options,\n      dataIndex,\n      rowIndex,\n      className,\n      print,\n      ...otherProps\n    } = this.props;\n\n    return [\n      <TableCell\n        key={1}\n        className={classNames(\n          {\n            [classes.root]: true,\n            [classes.cellHide]: true,\n            [classes.cellStacked]: options.responsive === 'stacked',\n            'datatables-noprint': !print,\n          },\n          className,\n        )}>\n        {columnHeader}\n      </TableCell>,\n      <TableCell\n        key={2}\n        onClick={this.handleClick}\n        className={classNames(\n          {\n            [classes.root]: true,\n            [classes.responsiveStacked]: options.responsive === 'stacked',\n            'datatables-noprint': !print,\n          },\n          className,\n        )}\n        {...otherProps}>\n        {children}\n      </TableCell>,\n    ];\n  }\n}\n\nexport default withStyles(defaultBodyCellStyles, { name: 'MUIDataTableBodyCell' })(TableBodyCell);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultBodyRowStyles = theme => ({\n  root: {},\n  hover: {},\n  hoverCursor: { cursor: 'pointer' },\n  responsiveStacked: {\n    [theme.breakpoints.down('sm')]: {\n      border: 'solid 2px rgba(0, 0, 0, 0.15)',\n    },\n  },\n});\n\nclass TableBodyRow extends React.Component {\n  static propTypes = {\n    /** Options used to describe table */\n    options: PropTypes.object.isRequired,\n    /** Callback to execute when row is clicked */\n    onClick: PropTypes.func,\n    /** Current row selected or not */\n    rowSelected: PropTypes.bool,\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  render() {\n    const { classes, options, rowSelected, onClick, className, ...rest } = this.props;\n\n    return (\n      <TableRow\n        hover={options.rowHover ? true : false}\n        onClick={onClick}\n        className={classNames(\n          {\n            [classes.root]: true,\n            [classes.hover]: options.rowHover,\n            [classes.hoverCursor]: options.selectableRowsOnClick || options.expandableRowsOnClick,\n            [classes.responsiveStacked]: options.responsive === 'stacked',\n          },\n          className,\n        )}\n        selected={rowSelected}\n        {...rest}>\n        {this.props.children}\n      </TableRow>\n    );\n  }\n}\n\nexport default withStyles(defaultBodyRowStyles, { name: 'MUIDataTableBodyRow' })(TableBodyRow);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\n\nconst defaultSelectCellStyles = theme => ({\n  root: {\n    [theme.breakpoints.down('sm')]: {\n      backgroundColor: theme.palette.background.paper,\n    },\n  },\n  fixedHeader: {\n    position: 'sticky',\n    top: '0px',\n    left: '0px',\n    zIndex: 100,\n  },\n  icon: {\n    cursor: 'pointer',\n    transition: 'transform 0.25s',\n  },\n  expanded: {\n    transform: 'rotate(90deg)',\n  },\n  hide: {\n    visibility: 'hidden',\n  },\n  headerCell: {\n    zIndex: 110,\n    backgroundColor: theme.palette.background.paper,\n  },\n  checkboxRoot: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n    },\n  },\n  checked: {},\n  disabled: {},\n});\n\nclass TableSelectCell extends React.Component {\n  static propTypes = {\n    /** Select cell checked on/off */\n    checked: PropTypes.bool.isRequired,\n    /** Select cell part of fixed header */\n    fixedHeader: PropTypes.bool.isRequired,\n    /** Callback to trigger cell update */\n    onChange: PropTypes.func,\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n    /** Is expandable option enabled */\n    expandableOn: PropTypes.bool,\n    /** Is selectable option enabled */\n    selectableOn: PropTypes.string,\n    /** Select cell disabled on/off */\n  };\n\n  static defaultProps = {\n    isHeaderCell: false,\n    isRowExpanded: false,\n    expandableOn: false,\n    selectableOn: 'none',\n  };\n\n  render() {\n    const {\n      classes,\n      fixedHeader,\n      isHeaderCell,\n      expandableOn,\n      selectableOn,\n      isRowExpanded,\n      onExpand,\n      isRowSelectable,\n      ...otherProps\n    } = this.props;\n\n    if (!expandableOn && selectableOn === 'none') return false;\n\n    const cellClass = classNames({\n      [classes.root]: true,\n      [classes.fixedHeader]: fixedHeader,\n      [classes.headerCell]: isHeaderCell,\n    });\n\n    const iconClass = classNames({\n      [classes.icon]: true,\n      [classes.hide]: isHeaderCell,\n      [classes.expanded]: isRowExpanded,\n    });\n\n    const renderCheckBox = () => {\n      if (isHeaderCell && selectableOn !== 'multiple') {\n        // only display the header checkbox for multiple selection.\n        return null;\n      }\n      return (\n        <Checkbox\n          classes={{\n            root: classes.checkboxRoot,\n            checked: classes.checked,\n            disabled: classes.disabled,\n          }}\n          disabled={!isRowSelectable}\n          {...otherProps}\n        />\n      );\n    };\n\n    return (\n      <TableCell className={cellClass} padding=\"checkbox\">\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          {expandableOn && <KeyboardArrowRight id=\"expandable-button\" className={iconClass} onClick={onExpand} />}\n          {selectableOn !== 'none' && renderCheckBox()}\n        </div>\n      </TableCell>\n    );\n  }\n}\n\nexport default withStyles(defaultSelectCellStyles, { name: 'MUIDataTableSelectCell' })(TableSelectCell);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport MuiTableBody from '@material-ui/core/TableBody';\nimport TableBodyCell from './TableBodyCell';\nimport TableBodyRow from './TableBodyRow';\nimport TableSelectCell from './TableSelectCell';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultBodyStyles = {\n  root: {},\n  emptyTitle: {\n    textAlign: 'center',\n  },\n};\n\nclass TableBody extends React.Component {\n  static propTypes = {\n    /** Data used to describe table */\n    data: PropTypes.array.isRequired,\n    /** Total number of data rows */\n    count: PropTypes.number.isRequired,\n    /** Columns used to describe table */\n    columns: PropTypes.array.isRequired,\n    /** Options used to describe table */\n    options: PropTypes.object.isRequired,\n    /** Data used to filter table against */\n    filterList: PropTypes.array,\n    /** Callback to execute when row is clicked */\n    onRowClick: PropTypes.func,\n    /** Table rows selected */\n    selectedRows: PropTypes.object,\n    /** Callback to trigger table row select */\n    selectRowUpdate: PropTypes.func,\n    /** Data used to search table against */\n    searchText: PropTypes.string,\n    /** Toggle row expandable */\n    toggleExpandRow: PropTypes.func,\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  static defaultProps = {\n    toggleExpandRow: () => {},\n  };\n\n  buildRows() {\n    const { data, page, rowsPerPage, count } = this.props;\n\n    if (this.props.options.serverSide) return data.length ? data : null;\n\n    let rows = [];\n    const totalPages = Math.floor(count / rowsPerPage);\n    const fromIndex = page === 0 ? 0 : page * rowsPerPage;\n    const toIndex = Math.min(count, (page + 1) * rowsPerPage);\n\n    if (page > totalPages && totalPages !== 0) {\n      throw new Error(\n        'Provided options.page of `' +\n          page +\n          '` is greater than the total available page length of `' +\n          totalPages +\n          '`',\n      );\n    }\n\n    for (let rowIndex = fromIndex; rowIndex < count && rowIndex < toIndex; rowIndex++) {\n      if (data[rowIndex] !== undefined) rows.push(data[rowIndex]);\n    }\n\n    return rows.length ? rows : null;\n  }\n\n  getRowIndex(index) {\n    const { page, rowsPerPage, options } = this.props;\n\n    if (options.serverSide) {\n      return index;\n    }\n\n    const startIndex = page === 0 ? 0 : page * rowsPerPage;\n    return startIndex + index;\n  }\n\n  isRowSelected(dataIndex) {\n    const { selectedRows } = this.props;\n    return selectedRows.lookup && selectedRows.lookup[dataIndex] ? true : false;\n  }\n\n  isRowExpanded(dataIndex) {\n    const { expandedRows } = this.props;\n    return expandedRows.lookup && expandedRows.lookup[dataIndex] ? true : false;\n  }\n\n  isRowSelectable(dataIndex) {\n    const { options } = this.props;\n    if (options.isRowSelectable) {\n      return options.isRowSelectable(dataIndex);\n    }\n    return true;\n  }\n\n  handleRowSelect = data => {\n    this.props.selectRowUpdate('cell', data);\n  };\n\n  handleRowClick = (row, data, event) => {\n    // Don't trigger onRowClick if the event was actually the expandable icon\n    if (\n      event.target.id === 'expandable-button' ||\n      (event.target.nodeName === 'path' && event.target.parentNode.id === 'expandable-button')\n    ) {\n      // In a future release, onRowClick will no longer be called here (for consistency).\n      // For now, issue a deprecated warning.\n      if (this.props.options.onRowClick) {\n        console.warn(\n          'Deprecated: Clicks on expandable button will not trigger onRowClick in an upcoming release, see: https://github.com/gregnb/mui-datatables/issues/516.',\n        );\n        this.props.options.onRowClick(row, data, event);\n      }\n\n      return;\n    }\n\n    // Don't trigger onRowClick if the event was actually a row selection\n    if (event.target.id && event.target.id.startsWith('MUIDataTableSelectCell')) {\n      return;\n    }\n\n    // Check if we should toggle row select when row is clicked anywhere\n    if (this.props.options.selectableRowsOnClick && this.props.options.selectableRows !== 'none') {\n      const selectRow = { index: data.rowIndex, dataIndex: data.dataIndex };\n      this.handleRowSelect(selectRow);\n    }\n    // Check if we should trigger row expand when row is clicked anywhere\n    if (this.props.options.expandableRowsOnClick && this.props.options.expandableRows) {\n      const expandRow = { index: data.rowIndex, dataIndex: data.dataIndex };\n      this.props.toggleExpandRow(expandRow);\n    }\n\n    this.props.options.onRowClick && this.props.options.onRowClick(row, data, event);\n  };\n\n  render() {\n    const { classes, columns, toggleExpandRow, options } = this.props;\n    const tableRows = this.buildRows();\n    const visibleColCnt = columns.filter(c => c.display === 'true').length;\n\n    return (\n      <MuiTableBody>\n        {tableRows && tableRows.length > 0 ? (\n          tableRows.map((data, rowIndex) => {\n            const { data: row, dataIndex } = data;\n\n            if (options.customRowRender) {\n              return options.customRowRender(row, dataIndex, rowIndex);\n            }\n\n            return (\n              <React.Fragment key={rowIndex}>\n                <TableBodyRow\n                  {...(options.setRowProps ? options.setRowProps(row, dataIndex) : {})}\n                  options={options}\n                  rowSelected={options.selectableRows !== 'none' ? this.isRowSelected(dataIndex) : false}\n                  onClick={this.handleRowClick.bind(null, row, { rowIndex, dataIndex })}\n                  id={'MUIDataTableBodyRow-' + dataIndex}>\n                  <TableSelectCell\n                    onChange={this.handleRowSelect.bind(null, {\n                      index: this.getRowIndex(rowIndex),\n                      dataIndex: dataIndex,\n                    })}\n                    onExpand={toggleExpandRow.bind(null, {\n                      index: this.getRowIndex(rowIndex),\n                      dataIndex: dataIndex,\n                    })}\n                    fixedHeader={options.fixedHeader}\n                    checked={this.isRowSelected(dataIndex)}\n                    expandableOn={options.expandableRows}\n                    selectableOn={options.selectableRows}\n                    isRowExpanded={this.isRowExpanded(dataIndex)}\n                    isRowSelectable={this.isRowSelectable(dataIndex)}\n                    id={'MUIDataTableSelectCell-' + dataIndex}\n                  />\n                  {row.map(\n                    (column, columnIndex) =>\n                      columns[columnIndex].display === 'true' && (\n                        <TableBodyCell\n                          {...(columns[columnIndex].setCellProps\n                            ? columns[columnIndex].setCellProps(column, dataIndex, columnIndex)\n                            : {})}\n                          dataIndex={dataIndex}\n                          rowIndex={rowIndex}\n                          colIndex={columnIndex}\n                          columnHeader={columns[columnIndex].label}\n                          print={columns[columnIndex].print}\n                          options={options}\n                          key={columnIndex}>\n                          {column}\n                        </TableBodyCell>\n                      ),\n                  )}\n                </TableBodyRow>\n                {this.isRowExpanded(dataIndex) && options.renderExpandableRow(row, { rowIndex, dataIndex })}\n              </React.Fragment>\n            );\n          })\n        ) : (\n          <TableBodyRow options={options}>\n            <TableBodyCell\n              colSpan={options.selectableRows !== 'none' || options.expandableRows ? visibleColCnt + 1 : visibleColCnt}\n              options={options}\n              colIndex={0}\n              rowIndex={0}>\n              <Typography variant=\"subtitle1\" className={classes.emptyTitle}>\n                {options.textLabels.body.noMatch}\n              </Typography>\n            </TableBodyCell>\n          </TableBodyRow>\n        )}\n      </MuiTableBody>\n    );\n  }\n}\n\nexport default withStyles(defaultBodyStyles, { name: 'MUIDataTableBody' })(TableBody);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultResizeStyles = {\n  root: {\n    position: 'absolute',\n  },\n  resizer: {\n    position: 'absolute',\n    width: '1px',\n    height: '100%',\n    left: '100px',\n    cursor: 'ew-resize',\n    border: '0.1px solid rgba(224, 224, 224, 1)',\n  },\n};\n\nclass TableResize extends React.Component {\n  static propTypes = {\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  state = {\n    resizeCoords: {},\n    priorPosition: {},\n    startPosition: 0,\n    tableWidth: '100%',\n    tableHeight: '100%',\n  };\n\n  handleResize = () => {\n    if (window.innerWidth !== this.windowWidth) {\n      this.windowWidth = window.innerWidth;\n      this.setDividers();\n    }\n  };\n\n  componentDidMount() {\n    this.windowWidth = null;\n    this.props.setResizeable(this.setCellRefs);\n    this.props.updateDividers(() => this.setState({ updateCoords: true }, () => this.updateWidths));\n    window.addEventListener('resize', this.handleResize, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize, false);\n  }\n\n  setCellRefs = (cellsRef, tableRef) => {\n    this.cellsRef = cellsRef;\n    this.tableRef = tableRef;\n    this.setDividers();\n  };\n\n  setDividers = () => {\n    const tableEl = findDOMNode(this.tableRef);\n    const { width: tableWidth, height: tableHeight } = tableEl.getBoundingClientRect();\n    const { priorPosition, resizeCoords } = this.state;\n\n    let finalCells = Object.entries(this.cellsRef);\n\n    finalCells.forEach(([key, item]) => {\n      if (!item) return;\n\n      const elRect = item.getBoundingClientRect();\n      const elStyle = window.getComputedStyle(item, null);\n      const left = resizeCoords[key] !== undefined ? resizeCoords[key].left : undefined;\n      const oldLeft = priorPosition[key] || 0;\n      let newLeft = elRect.left + item.offsetWidth - parseInt(elStyle.paddingLeft) / 2;\n\n      if (left === oldLeft) return;\n\n      resizeCoords[key] = { left: newLeft };\n      priorPosition[key] = newLeft;\n    });\n\n    this.setState({ tableWidth, tableHeight, resizeCoords, priorPosition }, this.updateWidths);\n  };\n\n  updateWidths = () => {\n    let lastPosition = 0;\n    const { resizeCoords, tableWidth } = this.state;\n\n    Object.entries(resizeCoords).forEach(([key, item]) => {\n      let newWidth = Number(((item.left - lastPosition) / tableWidth) * 100).toFixed(2);\n      lastPosition = item.left;\n\n      const thCell = this.cellsRef[key];\n      if (thCell) thCell.style.width = newWidth + '%';\n    });\n  };\n\n  onResizeStart = (id, e) => {\n    this.setState({ isResize: true, id, startPosition: e.clientX });\n  };\n\n  onResizeMove = (id, e) => {\n    const { startPosition, isResize, resizeCoords } = this.state;\n\n    if (isResize) {\n      const leftPos = startPosition - (startPosition - e.clientX);\n\n      const curCoord = { ...resizeCoords[id], left: leftPos };\n      const newResizeCoords = { ...resizeCoords, [id]: curCoord };\n\n      this.setState({ resizeCoords: newResizeCoords }, this.updateWidths);\n    }\n  };\n\n  onResizeEnd = (id, e) => {\n    this.setState({ isResize: false, id: null });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { id, isResize, resizeCoords, tableWidth, tableHeight } = this.state;\n\n    return (\n      <div className={classes.root} style={{ width: tableWidth }}>\n        {Object.entries(resizeCoords).map(([key, val]) => {\n          return (\n            <div\n              aria-hidden=\"true\"\n              key={key}\n              onMouseMove={this.onResizeMove.bind(null, key)}\n              onMouseUp={this.onResizeEnd.bind(null, key)}\n              style={{\n                width: isResize && id == key ? tableWidth : 'auto',\n                position: 'absolute',\n                height: tableHeight,\n                zIndex: 1000,\n              }}>\n              <div\n                aria-hidden=\"true\"\n                onMouseDown={this.onResizeStart.bind(null, key)}\n                className={classes.resizer}\n                style={{ left: val.left }}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(defaultResizeStyles, { name: 'MUIDataTableResize' })(TableResize);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultHeadRowStyles = {\n  root: {},\n};\n\nclass TableHeadRow extends React.Component {\n  static propTypes = {\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <TableRow\n        className={classNames({\n          [classes.root]: true,\n        })}>\n        {this.props.children}\n      </TableRow>\n    );\n  }\n}\n\nexport default withStyles(defaultHeadRowStyles, { name: 'MUIDataTableHeadRow' })(TableHeadRow);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withStyles } from '@material-ui/core/styles';\nimport HelpIcon from '@material-ui/icons/Help';\n\nconst defaultHeadCellStyles = theme => ({\n  root: {},\n  fixedHeader: {\n    position: 'sticky',\n    top: '0px',\n    left: '0px',\n    zIndex: 100,\n    backgroundColor: theme.palette.background.paper,\n  },\n  tooltip: {\n    cursor: 'pointer',\n  },\n  mypopper: {\n    '&[data-x-out-of-boundaries]': {\n      display: 'none',\n    },\n  },\n  data: {\n    display: 'inline-block',\n  },\n  sortAction: {\n    display: 'flex',\n    verticalAlign: 'top',\n    cursor: 'pointer',\n    height: '10px',\n  },\n  sortActive: {\n    color: theme.palette.text.primary,\n  },\n  toolButton: {\n    display: 'flex',\n    height: '10px',\n    outline: 'none',\n    cursor: 'pointer',\n  },\n});\n\nclass TableHeadCell extends React.Component {\n  static propTypes = {\n    /** Extend the style applied to components */\n    classes: PropTypes.object,\n    /** Options used to describe table */\n    options: PropTypes.object.isRequired,\n    /** Current sort direction */\n    sortDirection: PropTypes.string,\n    /** Callback to trigger column sort */\n    toggleSort: PropTypes.func.isRequired,\n    /** Sort enabled / disabled for this column **/\n    sort: PropTypes.bool.isRequired,\n    /** Hint tooltip text */\n    hint: PropTypes.string,\n    /** Column displayed in print */\n    print: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    isSortTooltipOpen: false,\n    isHintTooltipOpen: false,\n  };\n\n  handleSortClick = () => {\n    this.props.toggleSort(this.props.index);\n  };\n\n  render() {\n    const { isSortTooltipOpen, isHintTooltipOpen } = this.state;\n    const { children, classes, options, sortDirection, sort, hint, print } = this.props;\n    const sortActive = sortDirection !== null && sortDirection !== undefined ? true : false;\n\n    const sortLabelProps = {\n      active: sortActive,\n      hideSortIcon: true,\n      ...(sortDirection ? { direction: sortDirection } : {}),\n    };\n\n    const cellClass = classNames({\n      [classes.root]: true,\n      [classes.fixedHeader]: options.fixedHeader,\n      'datatables-noprint': !print,\n    });\n\n    return (\n      <TableCell className={cellClass} scope={'col'} sortDirection={sortDirection}>\n        {options.sort && sort ? (\n          <Tooltip\n            title={options.textLabels.body.toolTip}\n            placement={'bottom-start'}\n            classes={{\n              tooltip: classes.tooltip,\n            }}\n            enterDelay={300}\n            classes={{ popper: classes.mypopper }}\n            open={isSortTooltipOpen}\n            onOpen={() =>\n              isHintTooltipOpen\n                ? this.setState({ isSortTooltipOpen: false })\n                : this.setState({ isSortTooltipOpen: true })\n            }\n            onClose={() => this.setState({ isSortTooltipOpen: false })}>\n            <span\n              role=\"button\"\n              onKeyUp={this.handleClickSort}\n              onClick={this.handleSortClick}\n              className={classes.toolButton}\n              tabIndex={0}>\n              <div\n                className={classNames({\n                  [classes.data]: true,\n                  [classes.sortActive]: sortActive,\n                })}>\n                {children}\n              </div>\n              <div className={classes.sortAction}>\n                <TableSortLabel {...sortLabelProps} />\n                {hint && (\n                  <Tooltip\n                    title={hint}\n                    placement={'bottom-end'}\n                    classes={{\n                      tooltip: classes.tooltip,\n                    }}\n                    enterDelay={300}\n                    classes={{ popper: classes.mypopper }}\n                    open={isHintTooltipOpen}\n                    onOpen={() => this.setState({ isSortTooltipOpen: false, isHintTooltipOpen: true })}\n                    onClose={() => this.setState({ isHintTooltipOpen: false })}>\n                    <HelpIcon fontSize=\"small\" />\n                  </Tooltip>\n                )}\n              </div>\n            </span>\n          </Tooltip>\n        ) : (\n          children\n        )}\n        {!options.sort ||\n          (!sort && hint && (\n            <Tooltip\n              title={hint}\n              placement={'bottom-end'}\n              classes={{\n                tooltip: classes.tooltip,\n              }}\n              enterDelay={300}\n              classes={{ popper: classes.mypopper }}>\n              <HelpIcon fontSize=\"small\" />\n            </Tooltip>\n          ))}\n      </TableCell>\n    );\n  }\n}\n\nexport default withStyles(defaultHeadCellStyles, { name: 'MUIDataTableHeadCell' })(TableHeadCell);\n","import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport classNames from 'classnames';\nimport MuiTableHead from '@material-ui/core/TableHead';\nimport TableHeadRow from './TableHeadRow';\nimport TableHeadCell from './TableHeadCell';\nimport TableSelectCell from './TableSelectCell';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultHeadStyles = theme => ({\n  main: {},\n  responsiveStacked: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n  },\n});\n\nclass TableHead extends React.Component {\n  componentDidMount() {\n    this.props.handleHeadUpdateRef(this.handleUpdateCheck);\n  }\n\n  handleToggleColumn = index => {\n    this.props.toggleSort(index);\n  };\n\n  handleRowSelect = () => {\n    this.props.selectRowUpdate('head', null);\n  };\n\n  render() {\n    const { classes, columns, count, options, data, page, setCellRef, selectedRows } = this.props;\n\n    const numSelected = (selectedRows && selectedRows.data.length) || 0;\n    const isDeterminate = numSelected > 0 && numSelected < count;\n    const isChecked = numSelected === count ? true : false;\n\n    return (\n      <MuiTableHead\n        className={classNames({ [classes.responsiveStacked]: options.responsive === 'stacked', [classes.main]: true })}>\n        <TableHeadRow>\n          <TableSelectCell\n            ref={el => setCellRef(0, findDOMNode(el))}\n            onChange={this.handleRowSelect.bind(null)}\n            indeterminate={isDeterminate}\n            checked={isChecked}\n            isHeaderCell={true}\n            expandableOn={options.expandableRows}\n            selectableOn={options.selectableRows}\n            fixedHeader={options.fixedHeader}\n            isRowSelectable={true}\n          />\n          {columns.map(\n            (column, index) =>\n              column.display === 'true' &&\n              (column.customHeadRender ? (\n                column.customHeadRender({ index, ...column }, this.handleToggleColumn)\n              ) : (\n                <TableHeadCell\n                  key={index}\n                  index={index}\n                  type={'cell'}\n                  ref={el => setCellRef(index + 1, findDOMNode(el))}\n                  sort={column.sort}\n                  sortDirection={column.sortDirection}\n                  toggleSort={this.handleToggleColumn}\n                  hint={column.hint}\n                  print={column.print}\n                  options={options}>\n                  {column.label}\n                </TableHeadCell>\n              )),\n          )}\n        </TableHeadRow>\n      </MuiTableHead>\n    );\n  }\n}\n\nexport default withStyles(defaultHeadStyles, { name: 'MUIDataTableHead' })(TableHead);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiTableRow from '@material-ui/core/TableRow';\nimport MuiTableFooter from '@material-ui/core/TableFooter';\nimport MuiTablePagination from '@material-ui/core/TablePagination';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst defaultPaginationStyles = {\n  root: {\n    '&:last-child': {\n      padding: '0px 24px 0px 24px',\n    },\n  },\n  toolbar: {},\n  selectRoot: {},\n  '@media screen and (max-width: 400px)': {\n    toolbar: {\n      '& span:nth-child(2)': {\n        display: 'none',\n      },\n    },\n    selectRoot: {\n      marginRight: '8px',\n    },\n  },\n};\n\nclass TablePagination extends React.Component {\n  static propTypes = {\n    /** Total number of table rows */\n    count: PropTypes.number.isRequired,\n    /** Options used to describe table */\n    options: PropTypes.object.isRequired,\n    /** Current page index */\n    page: PropTypes.number.isRequired,\n    /** Total number allowed of rows per page */\n    rowsPerPage: PropTypes.number.isRequired,\n    /** Callback to trigger rows per page change */\n    changeRowsPerPage: PropTypes.func.isRequired,\n  };\n\n  handleRowChange = event => {\n    this.props.changeRowsPerPage(event.target.value);\n  };\n\n  handlePageChange = (_, page) => {\n    const { options } = this.props;\n    this.props.changePage(page);\n  };\n\n  render() {\n    const { count, classes, options, rowsPerPage, page } = this.props;\n    const textLabels = options.textLabels.pagination;\n\n    return (\n      <MuiTableFooter>\n        <MuiTableRow>\n          <MuiTablePagination\n            className={classes.root}\n            classes={{\n              caption: classes.caption,\n              toolbar: classes.toolbar,\n              selectRoot: classes.selectRoot,\n            }}\n            count={count}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            labelRowsPerPage={textLabels.rowsPerPage}\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${textLabels.displayRows} ${count}`}\n            backIconButtonProps={{\n              id: 'pagination-back',\n              'aria-label': textLabels.previous,\n            }}\n            nextIconButtonProps={{\n              id: 'pagination-next',\n              'aria-label': textLabels.next,\n            }}\n            SelectProps={{\n              id: 'pagination-input',\n              SelectDisplayProps: { id: 'pagination-rows' },\n              MenuProps: {\n                id: 'pagination-menu',\n                MenuListProps: { id: 'pagination-menu-list' },\n              },\n            }}\n            rowsPerPageOptions={options.rowsPerPageOptions}\n            onChangePage={this.handlePageChange}\n            onChangeRowsPerPage={this.handleRowChange}\n          />\n        </MuiTableRow>\n      </MuiTableFooter>\n    );\n  }\n}\n\nexport default withStyles(defaultPaginationStyles, { name: 'MUIDataTablePagination' })(TablePagination);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiTable from '@material-ui/core/Table';\nimport TableHead from './TableHead';\nimport TablePagination from './TablePagination';\nimport { withStyles } from '@material-ui/core/styles';\n\nexport const defaultFooterStyles = {};\n\nclass TableFooter extends React.Component {\n  static propTypes = {};\n\n  render() {\n    const { options, rowCount, page, rowsPerPage, changeRowsPerPage, changePage } = this.props;\n\n    return (\n      <MuiTable>\n        {options.customFooter\n          ? options.customFooter(rowCount, page, rowsPerPage, changeRowsPerPage, changePage)\n          : options.pagination && (\n              <TablePagination\n                count={rowCount}\n                page={page}\n                rowsPerPage={rowsPerPage}\n                changeRowsPerPage={changeRowsPerPage}\n                changePage={changePage}\n                component={'div'}\n                options={options}\n              />\n            )}\n      </MuiTable>\n    );\n  }\n}\n\nexport default TableFooter;\n","/*\n * Default text labels.\n */\nconst textLabels = {\n  body: {\n    noMatch: 'Desculpe, nenhum registro correspondente foi encontrado',\n    toolTip: 'Ordenar',\n  },\n  pagination: {\n    next: 'Próxima página',\n    previous: 'Página anterior',\n    rowsPerPage: 'Linhas por página:',\n    displayRows: 'De',\n  },\n  toolbar: {\n    search: 'Pesquisar',\n    downloadCsv: 'Download CSV',\n    print: 'Imprimir',\n    viewColumns: 'Visualizar colunas',\n    filterTable: 'Filtrar Tabela',\n  },\n  filter: {\n    all: 'TODOS',\n    title: 'FILTROS',\n    reset: 'LIMPAR',\n  },\n  viewColumns: {\n    title: 'Mostrar Colunas',\n    titleAria: 'Mostrar / ocultar colunas da tabela',\n  },\n  selectedRows: {\n    text: 'linha (s) selecionada',\n    delete: 'Excluir',\n    deleteAria: 'Excluir linhas selecionadas',\n  },\n};\n\nexport default textLabels;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport MuiTable from '@material-ui/core/Table';\nimport TableToolbar from './components/TableToolbar';\nimport TableToolbarSelect from './components/TableToolbarSelect';\nimport TableFilterList from './components/TableFilterList';\nimport TableBody from './components/TableBody';\nimport TableResize from './components/TableResize';\nimport TableHead from './components/TableHead';\nimport TableFooter from './components/TableFooter';\nimport classnames from 'classnames';\nimport cloneDeep from 'lodash.clonedeep';\nimport merge from 'lodash.merge';\nimport isEqual from 'lodash.isequal';\nimport find from 'lodash.find';\nimport isUndefined from 'lodash.isundefined';\nimport textLabels from './textLabels';\nimport { withStyles } from '@material-ui/core/styles';\nimport { buildMap, getCollatorComparator, sortCompare } from './utils';\n\nconst defaultTableStyles = {\n  root: {},\n  paperBody: {\n    webkitBoxShadow: '0px 10px 17px -5px rgba(150,150,150,0.48)',\n    mozBoxShadow: '0px 10px 17px -5px rgba(150,150,150,0.48)',\n    boxShadow: '0px 10px 17px -5px rgba(150,150,150,0.48)',\n  },\n  tableRoot: {\n    outline: 'none',\n  },\n  responsiveScroll: {\n    overflowX: 'auto',\n    overflow: 'auto',\n    height: '100%',\n    maxHeight: '499px',\n  },\n  caption: {\n    position: 'absolute',\n    left: '-3000px',\n  },\n  liveAnnounce: {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  },\n  '@global': {\n    '@media print': {\n      '.datatables-noprint': {\n        display: 'none',\n      },\n    },\n  },\n};\n\nconst TABLE_LOAD = {\n  INITIAL: 1,\n  UPDATE: 2,\n};\n\n// Populate this list with anything that might render in the toolbar to determine if we hide the toolbar\nconst TOOLBAR_ITEMS = ['title', 'color', 'filter', 'search', 'print', 'download', 'viewColumns', 'customToolbar'];\n\nconst hasToolbarItem = (options, title) => {\n  options.title = title;\n\n  return !isUndefined(find(TOOLBAR_ITEMS, i => options[i]));\n};\n\nclass MUIDataTable extends React.Component {\n  static propTypes = {\n    /** Title of the table */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /** Data used to describe table */\n    data: PropTypes.array.isRequired,\n    /** Columns used to describe table */\n    columns: PropTypes.PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n          label: PropTypes.string,\n          name: PropTypes.string.isRequired,\n          options: PropTypes.shape({\n            display: PropTypes.string, // enum('true', 'false', 'excluded')\n            empty: PropTypes.bool,\n            filter: PropTypes.bool,\n            sort: PropTypes.bool,\n            print: PropTypes.bool,\n            searchable: PropTypes.bool,\n            download: PropTypes.bool,\n            viewColumns: PropTypes.bool,\n            filterList: PropTypes.array,\n            filterOptions: PropTypes.oneOfType([\n              PropTypes.array,\n              PropTypes.shape({\n                names: PropTypes.array,\n                logic: PropTypes.func,\n              }),\n            ]),\n            filterType: PropTypes.oneOf(['dropdown', 'checkbox', 'multiselect', 'textField']),\n            customHeadRender: PropTypes.func,\n            customBodyRender: PropTypes.func,\n            customFilterListRender: PropTypes.func,\n          }),\n        }),\n      ]),\n    ).isRequired,\n    /** Options used to describe table */\n    options: PropTypes.shape({\n      responsive: PropTypes.oneOf(['stacked', 'scroll']),\n      filterType: PropTypes.oneOf(['dropdown', 'checkbox', 'multiselect', 'textField']),\n      textLabels: PropTypes.object,\n      pagination: PropTypes.bool,\n      expandableRows: PropTypes.bool,\n      expandableRowsOnClick: PropTypes.bool,\n      renderExpandableRow: PropTypes.func,\n      customToolbar: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n      customToolbarSelect: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n      customFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n      customRowRender: PropTypes.func,\n      onRowClick: PropTypes.func,\n      resizableColumns: PropTypes.bool,\n      selectableRows: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['none', 'single', 'multiple'])]),\n      selectableRowsOnClick: PropTypes.bool,\n      isRowSelectable: PropTypes.func,\n      serverSide: PropTypes.bool,\n      onTableChange: PropTypes.func,\n      onTableInit: PropTypes.func,\n      caseSensitive: PropTypes.bool,\n      rowHover: PropTypes.bool,\n      fixedHeader: PropTypes.bool,\n      page: PropTypes.number,\n      count: PropTypes.number,\n      rowsSelected: PropTypes.array,\n      rowsPerPage: PropTypes.number,\n      rowsPerPageOptions: PropTypes.array,\n      filter: PropTypes.bool,\n      sort: PropTypes.bool,\n      customSort: PropTypes.func,\n      customSearch: PropTypes.func,\n      search: PropTypes.bool,\n      searchText: PropTypes.string,\n      print: PropTypes.bool,\n      viewColumns: PropTypes.bool,\n      download: PropTypes.bool,\n      downloadOptions: PropTypes.shape({\n        filename: PropTypes.string,\n        separator: PropTypes.string,\n      }),\n      onDownload: PropTypes.func,\n    }),\n    /** Pass and use className to style MUIDataTable as desired */\n    className: PropTypes.string,\n  };\n\n  static defaultProps = {\n    title: '',\n    options: {},\n    data: [],\n    columns: [],\n  };\n\n  state = {\n    announceText: null,\n    activeColumn: null,\n    data: [],\n    displayData: [],\n    page: 0,\n    rowsPerPage: 0,\n    count: 0,\n    columns: [],\n    filterData: [],\n    filterList: [],\n    selectedRows: {\n      data: [],\n      lookup: {},\n    },\n    expandedRows: {\n      data: [],\n      lookup: {},\n    },\n    showResponsive: false,\n    searchText: null,\n  };\n\n  constructor() {\n    super();\n    this.tableRef = false;\n    this.tableContent = React.createRef();\n    this.headCellRefs = {};\n    this.setHeadResizeable = () => {};\n    this.updateDividers = () => {};\n  }\n\n  componentWillMount() {\n    this.initializeTable(this.props);\n  }\n\n  componentDidMount() {\n    this.setHeadResizeable(this.headCellRefs, this.tableRef);\n\n    // When we have a search, we must reset page to view it\n    if (this.props.options.searchText) this.setState({ page: 0 });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data || this.props.columns !== prevProps.columns) {\n      this.setTableData(this.props, TABLE_LOAD.INITIAL, () => {\n        this.setTableAction('propsUpdate');\n      });\n      this.updateOptions(this.props);\n    }\n\n    if (this.props.options.searchText !== prevProps.options.searchText) {\n      // When we have a search, we must reset page to view it\n      this.setState({ page: 0 });\n    }\n\n    if (this.options.resizableColumns) {\n      this.setHeadResizeable(this.headCellRefs, this.tableRef);\n      this.updateDividers();\n    }\n  }\n\n  updateOptions(props) {\n    this.options = merge(this.options, props.options);\n  }\n\n  initializeTable(props) {\n    this.getDefaultOptions(props);\n    this.setTableOptions(props);\n    this.setTableData(props, TABLE_LOAD.INITIAL, () => {\n      this.setTableInit('tableInitialized');\n    });\n  }\n\n  /*\n   * React currently does not support deep merge for defaultProps. Objects are overwritten\n   */\n  getDefaultOptions(props) {\n    const defaultOptions = {\n      responsive: 'stacked',\n      filterType: 'dropdown',\n      pagination: true,\n      textLabels,\n      expandableRows: false,\n      expandableRowsOnClick: false,\n      resizableColumns: false,\n      selectableRows: 'multiple',\n      selectableRowsOnClick: false,\n      caseSensitive: false,\n      serverSide: false,\n      rowHover: true,\n      fixedHeader: true,\n      elevation: 4,\n      rowsPerPage: 10,\n      rowsPerPageOptions: [10, 15, 100],\n      filter: true,\n      sortFilterList: true,\n      sort: true,\n      search: true,\n      print: true,\n      viewColumns: true,\n      download: true,\n      downloadOptions: {\n        filename: 'tableDownload.csv',\n        separator: ',',\n      },\n    };\n\n    const extra = {};\n    if (typeof props.options.selectableRows === 'boolean') {\n      extra.selectableRows = props.options.selectableRows ? 'multiple' : 'none';\n    }\n    this.options = merge(defaultOptions, props.options, extra);\n    if (props.options.rowsPerPageOptions) {\n      this.options.rowsPerPageOptions = props.options.rowsPerPageOptions;\n    }\n  }\n\n  validateOptions(options) {\n    if (options.serverSide && options.onTableChange === undefined) {\n      throw Error('onTableChange callback must be provided when using serverSide option');\n    }\n    if (options.expandableRows && options.renderExpandableRow === undefined) {\n      throw Error('renderExpandableRow must be provided when using expandableRows option');\n    }\n    if (this.props.options.filterList) {\n      console.error(\n        'Deprecated: filterList must now be provided under each column option. see https://github.com/gregnb/mui-datatables/tree/master/examples/column-filters example',\n      );\n    }\n  }\n\n  setTableAction = action => {\n    if (typeof this.options.onTableChange === 'function') {\n      this.options.onTableChange(action, this.state);\n    }\n  };\n\n  setTableInit = action => {\n    if (typeof this.options.onTableInit === 'function') {\n      this.options.onTableInit(action, this.state);\n    }\n  };\n\n  setTableOptions(props) {\n    const optionNames = ['rowsPerPage', 'page', 'rowsSelected', 'rowsPerPageOptions'];\n    const optState = optionNames.reduce((acc, cur) => {\n      if (this.options[cur] !== undefined) {\n        acc[cur] = this.options[cur];\n      }\n      return acc;\n    }, {});\n\n    this.validateOptions(optState);\n    this.setState(optState);\n  }\n\n  setHeadCellRef = (index, el) => {\n    this.headCellRefs[index] = el;\n  };\n\n  getTableContentRef = () => {\n    return this.tableContent.current;\n  };\n\n  rawColumns = cols => {\n    return cols.map(item => {\n      if (typeof item !== 'object') return item;\n\n      let otherOptions = {};\n      const { options, ...otherProps } = item;\n\n      if (options) {\n        const { customHeadRender, customBodyRender, customFilterListRender, setCellProps, ...nonFnOpts } = options;\n        otherOptions = nonFnOpts;\n      }\n\n      return { ...otherOptions, ...otherProps };\n    });\n  };\n\n  /*\n   *  Build the source table data\n   */\n\n  buildColumns = newColumns => {\n    let columnData = [];\n    let filterData = [];\n    let filterList = [];\n\n    newColumns.forEach((column, colIndex) => {\n      let columnOptions = {\n        display: 'true',\n        empty: false,\n        filter: true,\n        sort: true,\n        print: true,\n        searchable: true,\n        download: true,\n        viewColumns: true,\n        sortDirection: null,\n      };\n\n      if (typeof column === 'object') {\n        if (column.options && column.options.display !== undefined) {\n          column.options.display = column.options.display.toString();\n        }\n\n        columnOptions = {\n          name: column.name,\n          label: column.label ? column.label : column.name,\n          ...columnOptions,\n          ...(column.options ? column.options : {}),\n        };\n      } else {\n        columnOptions = { ...columnOptions, name: column, label: column };\n      }\n\n      columnData.push(columnOptions);\n\n      filterData[colIndex] = [];\n      filterList[colIndex] = [];\n    });\n\n    return { columns: columnData, filterData, filterList };\n  };\n\n  transformData = (columns, data) => {\n    const leaf = (obj, path) => path.split('.').reduce((value, el) => (value ? value[el] : undefined), obj);\n\n    return Array.isArray(data[0])\n      ? data.map(row => {\n          let i = -1;\n\n          return columns.map(col => {\n            if (!col.empty) i++;\n            return col.empty ? undefined : row[i];\n          });\n        })\n      : data.map(row => columns.map(col => leaf(row, col.name)));\n  };\n\n  setTableData(props, status, callback = () => {}) {\n    const { options } = props;\n\n    let tableData = [];\n    let { columns, filterData, filterList } = this.buildColumns(props.columns);\n    let sortIndex = null;\n    let sortDirection = null;\n\n    const data = status === TABLE_LOAD.INITIAL ? this.transformData(columns, props.data) : props.data;\n    const searchText = status === TABLE_LOAD.INITIAL ? options.searchText : null;\n\n    columns.forEach((column, colIndex) => {\n      for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n        let value = status === TABLE_LOAD.INITIAL ? data[rowIndex][colIndex] : data[rowIndex].data[colIndex];\n\n        if (typeof tableData[rowIndex] === 'undefined') {\n          tableData.push({\n            index: status === TABLE_LOAD.INITIAL ? rowIndex : data[rowIndex].index,\n            data: status === TABLE_LOAD.INITIAL ? data[rowIndex] : data[rowIndex].data,\n          });\n        }\n\n        if (typeof column.customBodyRender === 'function') {\n          const tableMeta = this.getTableMeta(rowIndex, colIndex, value, column, [], this.state);\n          const funcResult = column.customBodyRender(value, tableMeta);\n\n          if (React.isValidElement(funcResult) && funcResult.props.value) {\n            value = funcResult.props.value;\n          } else if (typeof funcResult === 'string') {\n            value = funcResult;\n          }\n        }\n\n        if (filterData[colIndex].indexOf(value) < 0 && !Array.isArray(value)) {\n          filterData[colIndex].push(value);\n        } else if (Array.isArray(value)) {\n          value.forEach(element => {\n            if (filterData[colIndex].indexOf(element) < 0) {\n              filterData[colIndex].push(element);\n            }\n          });\n        }\n      }\n\n      if (column.filterOptions) {\n        if (Array.isArray(column.filterOptions)) {\n          filterData[colIndex] = cloneDeep(column.filterOptions);\n          console.error(\n            'Deprecated: filterOptions must now be an object. see https://github.com/gregnb/mui-datatables/tree/master/examples/customize-filter example',\n          );\n        } else if (Array.isArray(column.filterOptions.names)) {\n          filterData[colIndex] = cloneDeep(column.filterOptions.names);\n        }\n      }\n\n      if (column.filterList) {\n        filterList[colIndex] = cloneDeep(column.filterList);\n      }\n\n      if (this.options.sortFilterList) {\n        const comparator = getCollatorComparator();\n        filterData[colIndex].sort(comparator);\n      }\n\n      if (column.sortDirection !== null) {\n        sortIndex = colIndex;\n        sortDirection = column.sortDirection;\n      }\n    });\n\n    let selectedRowsData = {\n      data: [],\n      lookup: {},\n    };\n\n    if (TABLE_LOAD.INITIAL) {\n      if (options.rowsSelected && options.rowsSelected.length) {\n        options.rowsSelected.forEach(row => {\n          let rowPos = row;\n\n          for (let cIndex = 0; cIndex < this.state.displayData.length; cIndex++) {\n            if (this.state.displayData[cIndex].dataIndex === row) {\n              rowPos = cIndex;\n              break;\n            }\n          }\n\n          selectedRowsData.data.push({ index: rowPos, dataIndex: row });\n          selectedRowsData.lookup[row] = true;\n        });\n      }\n    }\n\n    if (!options.serverSide && sortIndex !== null) {\n      const sortedData = this.sortTable(tableData, sortIndex, sortDirection);\n      tableData = sortedData.data;\n    }\n    /* set source data and display Data set source set */\n    this.setState(\n      prevState => ({\n        columns: columns,\n        filterData: filterData,\n        filterList: filterList,\n        searchText: searchText,\n        selectedRows: selectedRowsData,\n        count: options.count,\n        data: tableData,\n        displayData: this.getDisplayData(columns, tableData, filterList, searchText),\n      }),\n      callback,\n    );\n  }\n\n  /*\n   *  Build the table data used to display to the user (ie: after filter/search applied)\n   */\n  computeDisplayRow(columns, row, rowIndex, filterList, searchText) {\n    let isFiltered = false;\n    let isSearchFound = false;\n    let displayRow = [];\n\n    for (let index = 0; index < row.length; index++) {\n      let columnDisplay = row[index];\n      let columnValue = row[index];\n      let column = columns[index];\n\n      if (column.customBodyRender) {\n        const tableMeta = this.getTableMeta(rowIndex, index, row, column, this.state.data, {\n          ...this.state,\n          filterList: filterList,\n          searchText: searchText,\n        });\n\n        const funcResult = column.customBodyRender(\n          columnValue,\n          tableMeta,\n          this.updateDataCol.bind(null, rowIndex, index),\n        );\n        columnDisplay = funcResult;\n\n        /* drill down to get the value of a cell */\n        columnValue =\n          typeof funcResult === 'string' || !funcResult\n            ? funcResult\n            : funcResult.props && funcResult.props.value\n            ? funcResult.props.value\n            : columnValue;\n      }\n\n      displayRow.push(columnDisplay);\n\n      const columnVal = columnValue === null || columnValue === undefined ? '' : columnValue.toString();\n\n      const filterVal = filterList[index];\n      const caseSensitive = this.options.caseSensitive;\n      const filterType = column.filterType || this.options.filterType;\n      if (filterVal.length) {\n        if (column.filterOptions && column.filterOptions.logic) {\n          if (column.filterOptions.logic(columnValue, filterVal)) isFiltered = true;\n        } else if (filterType === 'textField' && !this.hasSearchText(columnVal, filterVal, caseSensitive)) {\n          isFiltered = true;\n        } else if (\n          filterType !== 'textField' &&\n          Array.isArray(columnValue) === false &&\n          filterVal.indexOf(columnValue) < 0\n        ) {\n          isFiltered = true;\n        } else if (filterType !== 'textField' && Array.isArray(columnValue)) {\n          //true if every filterVal exists in columnVal, false otherwise\n          const isFullMatch = filterVal.every(el => {\n            return columnValue.indexOf(el) >= 0;\n          });\n          //if it is not a fullMatch, filter row out\n          if (!isFullMatch) {\n            isFiltered = true;\n          }\n        }\n      }\n\n      if (\n        searchText &&\n        this.hasSearchText(columnVal, searchText, caseSensitive) &&\n        column.display !== 'false' &&\n        column.searchable\n      ) {\n        isSearchFound = true;\n      }\n    }\n\n    const { customSearch } = this.props.options;\n\n    if (searchText && customSearch) {\n      const customSearchResult = customSearch(searchText, row, columns);\n      if (typeof customSearchResult !== 'boolean') {\n        console.error('customSearch must return a boolean');\n      } else {\n        isSearchFound = customSearchResult;\n      }\n    }\n\n    if (this.options.serverSide) {\n      if (customSearch) {\n        console.warn('Server-side filtering is enabled, hence custom search will be ignored.');\n      }\n\n      return displayRow;\n    }\n\n    if (isFiltered || (searchText && !isSearchFound)) return null;\n    else return displayRow;\n  }\n\n  hasSearchText = (toSearch, toFind, caseSensitive) => {\n    let stack = toSearch.toString();\n    let needle = toFind.toString();\n\n    if (!caseSensitive) {\n      needle = needle.toLowerCase();\n      stack = stack.toLowerCase();\n    }\n\n    return stack.indexOf(needle) >= 0;\n  };\n\n  updateDataCol = (row, index, value) => {\n    this.setState(prevState => {\n      let changedData = cloneDeep(prevState.data);\n      let filterData = cloneDeep(prevState.filterData);\n\n      const tableMeta = this.getTableMeta(row, index, row, prevState.columns[index], prevState.data, prevState);\n      const funcResult = prevState.columns[index].customBodyRender(value, tableMeta);\n\n      const filterValue =\n        React.isValidElement(funcResult) && funcResult.props.value\n          ? funcResult.props.value\n          : prevState['data'][row][index];\n\n      const prevFilterIndex = filterData[index].indexOf(filterValue);\n      filterData[index].splice(prevFilterIndex, 1, filterValue);\n\n      changedData[row].data[index] = value;\n\n      if (this.options.sortFilterList) {\n        const comparator = getCollatorComparator();\n        filterData[index].sort(comparator);\n      }\n\n      return {\n        data: changedData,\n        filterData: filterData,\n        displayData: this.getDisplayData(prevState.columns, changedData, prevState.filterList, prevState.searchText),\n      };\n    });\n  };\n\n  getTableMeta = (rowIndex, colIndex, rowData, columnData, tableData, curState) => {\n    const { columns, data, displayData, filterData, ...tableState } = curState;\n\n    return {\n      rowIndex: rowIndex,\n      columnIndex: colIndex,\n      columnData: columnData,\n      rowData: rowData,\n      tableData: tableData,\n      tableState: tableState,\n    };\n  };\n\n  getDisplayData(columns, data, filterList, searchText) {\n    let newRows = [];\n\n    for (let index = 0; index < data.length; index++) {\n      const value = data[index].data;\n      const displayRow = this.computeDisplayRow(columns, value, index, filterList, searchText);\n\n      if (displayRow) {\n        newRows.push({\n          data: displayRow,\n          dataIndex: data[index].index,\n        });\n      }\n    }\n    return newRows;\n  }\n\n  toggleViewColumn = index => {\n    this.setState(\n      prevState => {\n        const columns = cloneDeep(prevState.columns);\n        columns[index].display = columns[index].display === 'true' ? 'false' : 'true';\n        return {\n          columns: columns,\n        };\n      },\n      () => {\n        this.setTableAction('columnViewChange');\n        if (this.options.onColumnViewChange) {\n          this.options.onColumnViewChange(\n            this.state.columns[index].name,\n            this.state.columns[index].display === 'true' ? 'add' : 'remove',\n          );\n        }\n      },\n    );\n  };\n\n  getSortDirection(column) {\n    return column.sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n\n  toggleSortColumn = index => {\n    this.setState(\n      prevState => {\n        let columns = cloneDeep(prevState.columns);\n        let data = prevState.data;\n        const newOrder = columns[index].sortDirection === 'desc' ? 'asc' : 'desc';\n\n        for (let pos = 0; pos < columns.length; pos++) {\n          if (index !== pos) {\n            columns[pos].sortDirection = null;\n          } else {\n            columns[pos].sortDirection = newOrder;\n          }\n        }\n\n        const orderLabel = this.getSortDirection(columns[index]);\n        const announceText = `Table now sorted by ${columns[index].name} : ${orderLabel}`;\n\n        let newState = {\n          columns: columns,\n          announceText: announceText,\n          activeColumn: index,\n        };\n\n        if (this.options.serverSide) {\n          newState = {\n            ...newState,\n            data: prevState.data,\n            displayData: prevState.displayData,\n            selectedRows: prevState.selectedRows,\n          };\n        } else {\n          const sortedData = this.sortTable(data, index, newOrder);\n\n          newState = {\n            ...newState,\n            data: sortedData.data,\n            displayData: this.getDisplayData(columns, sortedData.data, prevState.filterList, prevState.searchText),\n            selectedRows: sortedData.selectedRows,\n          };\n        }\n\n        return newState;\n      },\n      () => {\n        this.setTableAction('sort');\n        if (this.options.onColumnSortChange) {\n          this.options.onColumnSortChange(\n            this.state.columns[index].name,\n            this.getSortDirection(this.state.columns[index]),\n          );\n        }\n      },\n    );\n  };\n\n  changeRowsPerPage = rows => {\n    /**\n     * After changing rows per page recalculate totalPages and checks its if current page not higher.\n     * Otherwise sets current page the value of nextTotalPages\n     */\n    const rowCount = this.options.count || this.state.displayData.length;\n    const nextTotalPages = Math.floor(rowCount / rows);\n\n    this.setState(\n      () => ({\n        rowsPerPage: rows,\n        page: this.state.page > nextTotalPages ? nextTotalPages : this.state.page,\n      }),\n      () => {\n        this.setTableAction('changeRowsPerPage');\n        if (this.options.onChangeRowsPerPage) {\n          this.options.onChangeRowsPerPage(this.state.rowsPerPage);\n        }\n      },\n    );\n  };\n\n  changePage = page => {\n    this.setState(\n      () => ({\n        page: page,\n      }),\n      () => {\n        this.setTableAction('changePage');\n        if (this.options.onChangePage) {\n          this.options.onChangePage(this.state.page);\n        }\n      },\n    );\n  };\n\n  searchTextUpdate = text => {\n    this.setState(\n      prevState => ({\n        searchText: text && text.length ? text : null,\n        page: 0,\n        displayData: this.options.serverSide\n          ? prevState.displayData\n          : this.getDisplayData(prevState.columns, prevState.data, prevState.filterList, text),\n      }),\n      () => {\n        this.setTableAction('search');\n      },\n    );\n  };\n\n  resetFilters = () => {\n    this.setState(\n      prevState => {\n        const filterList = prevState.columns.map((column, index) => []);\n\n        return {\n          filterList: filterList,\n          displayData: this.options.serverSide\n            ? prevState.displayData\n            : this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\n        };\n      },\n      () => {\n        this.setTableAction('resetFilters');\n        if (this.options.onFilterChange) {\n          this.options.onFilterChange(null, this.state.filterList);\n        }\n      },\n    );\n  };\n\n  filterUpdate = (index, value, column, type) => {\n    this.setState(\n      prevState => {\n        const filterList = cloneDeep(prevState.filterList);\n        const filterPos = filterList[index].indexOf(value);\n\n        switch (type) {\n          case 'checkbox':\n            filterPos >= 0 ? filterList[index].splice(filterPos, 1) : filterList[index].push(value);\n            break;\n          case 'multiselect':\n            filterList[index] = value === '' ? [] : value;\n            break;\n          default:\n            filterList[index] = filterPos >= 0 || value === '' ? [] : [value];\n        }\n\n        return {\n          page: 0,\n          filterList: filterList,\n          displayData: this.options.serverSide\n            ? prevState.displayData\n            : this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\n        };\n      },\n      () => {\n        this.setTableAction('filterChange');\n        if (this.options.onFilterChange) {\n          this.options.onFilterChange(column, this.state.filterList);\n        }\n      },\n    );\n  };\n\n  selectRowDelete = () => {\n    const { selectedRows, data, filterList } = this.state;\n\n    const selectedMap = buildMap(selectedRows.data);\n    const cleanRows = data.filter(({ index }) => !selectedMap[index]);\n\n    if (this.options.onRowsDelete) {\n      if (this.options.onRowsDelete(selectedRows) === false) return;\n    }\n\n    this.setTableData(\n      {\n        columns: this.props.columns,\n        data: cleanRows,\n        options: {\n          filterList: filterList,\n        },\n      },\n      TABLE_LOAD.UPDATE,\n      () => {\n        this.setTableAction('rowDelete');\n      },\n    );\n  };\n\n  toggleExpandRow = row => {\n    const { dataIndex } = row;\n    let expandedRows = [...this.state.expandedRows.data];\n    let rowPos = -1;\n\n    for (let cIndex = 0; cIndex < expandedRows.length; cIndex++) {\n      if (expandedRows[cIndex].dataIndex === dataIndex) {\n        rowPos = cIndex;\n        break;\n      }\n    }\n\n    if (rowPos >= 0) {\n      expandedRows.splice(rowPos, 1);\n    } else {\n      expandedRows.push(row);\n    }\n\n    this.setState(\n      {\n        expandedRows: {\n          lookup: buildMap(expandedRows),\n          data: expandedRows,\n        },\n      },\n      () => {\n        this.setTableAction('expandRow');\n      },\n    );\n  };\n\n  selectRowUpdate = (type, value) => {\n    // safety check\n    const { selectableRows } = this.options;\n    if (selectableRows === 'none') {\n      return;\n    }\n\n    if (type === 'head') {\n      const { isRowSelectable } = this.options;\n      this.setState(\n        prevState => {\n          const { displayData } = prevState;\n          const selectedRowsLen = prevState.selectedRows.data.length;\n          const isDeselect =\n            selectedRowsLen === displayData.length || (selectedRowsLen < displayData.length && selectedRowsLen > 0)\n              ? true\n              : false;\n\n          let selectedRows = displayData.reduce((arr, d, i) => {\n            const selected = isRowSelectable ? isRowSelectable(displayData[i].dataIndex) : true;\n            selected && arr.push({ index: i, dataIndex: displayData[i].dataIndex });\n            return arr;\n          }, []);\n\n          let newRows = [...prevState.selectedRows, ...selectedRows];\n          let selectedMap = buildMap(newRows);\n\n          if (isDeselect) {\n            newRows = prevState.selectedRows.data.filter(({ dataIndex }) => !selectedMap[dataIndex]);\n            selectedMap = buildMap(newRows);\n          }\n\n          return {\n            curSelectedRows: newRows,\n            selectedRows: {\n              data: newRows,\n              lookup: selectedMap,\n            },\n          };\n        },\n        () => {\n          this.setTableAction('rowsSelect');\n          if (this.options.onRowsSelect) {\n            this.options.onRowsSelect(this.state.curSelectedRows, this.state.selectedRows.data);\n          }\n        },\n      );\n    } else if (type === 'cell') {\n      this.setState(\n        prevState => {\n          const { index, dataIndex } = value;\n          let selectedRows = [...prevState.selectedRows.data];\n          let rowPos = -1;\n\n          for (let cIndex = 0; cIndex < selectedRows.length; cIndex++) {\n            if (selectedRows[cIndex].index === index) {\n              rowPos = cIndex;\n              break;\n            }\n          }\n\n          if (rowPos >= 0) {\n            selectedRows.splice(rowPos, 1);\n          } else if (selectableRows === 'single') {\n            selectedRows = [value];\n          } else {\n            // multiple\n            selectedRows.push(value);\n          }\n\n          return {\n            selectedRows: {\n              lookup: buildMap(selectedRows),\n              data: selectedRows,\n            },\n          };\n        },\n        () => {\n          this.setTableAction('rowsSelect');\n          if (this.options.onRowsSelect) {\n            this.options.onRowsSelect([value], this.state.selectedRows.data);\n          }\n        },\n      );\n    } else if (type === 'custom') {\n      const { displayData } = this.state;\n\n      const data = value.map(row => ({ index: row, dataIndex: displayData[row].dataIndex }));\n      const lookup = buildMap(data);\n\n      this.setState(\n        {\n          selectedRows: { data, lookup },\n        },\n        () => {\n          this.setTableAction('rowsSelect');\n          if (this.options.onRowsSelect) {\n            this.options.onRowsSelect(this.state.selectedRows.data, this.state.selectedRows.data);\n          }\n        },\n      );\n    }\n  };\n\n  sortTable(data, col, order) {\n    let dataSrc = this.options.customSort ? this.options.customSort(data, col, order || 'desc') : data;\n\n    let sortedData = dataSrc.map((row, sIndex) => ({\n      data: row.data[col],\n      rowData: row.data,\n      position: sIndex,\n      rowSelected: this.state.selectedRows.lookup[row.index] ? true : false,\n    }));\n\n    if (!this.options.customSort) {\n      sortedData.sort(sortCompare(order));\n    }\n\n    let tableData = [];\n    let selectedRows = [];\n\n    for (let i = 0; i < sortedData.length; i++) {\n      const row = sortedData[i];\n      tableData.push(dataSrc[row.position]);\n      if (row.rowSelected) {\n        selectedRows.push({ index: i, dataIndex: dataSrc[row.position].index });\n      }\n    }\n\n    return {\n      data: tableData,\n      selectedRows: {\n        lookup: buildMap(selectedRows),\n        data: selectedRows,\n      },\n    };\n  }\n\n  // must be arrow function on local field to refer to the correct instance when passed around\n  // assigning it as arrow function in the JSX would cause hard to track re-render errors\n  getTableContentRef = () => {\n    return this.tableContent.current;\n  };\n\n  render() {\n    const { classes, className, title, color } = this.props;\n    const {\n      announceText,\n      activeColumn,\n      data,\n      displayData,\n      columns,\n      page,\n      filterData,\n      filterList,\n      selectedRows,\n      expandedRows,\n      searchText,\n    } = this.state;\n\n    const rowCount = this.state.count || displayData.length;\n    const rowsPerPage = this.options.pagination ? this.state.rowsPerPage : displayData.length;\n    const showToolbar = hasToolbarItem(this.options, title);\n    const columnNames = columns.map(column => ({ name: column.name }));\n\n    return (\n      <Paper elevation={this.options.elevation} ref={this.tableContent} className={classes.paperBody}>\n        {selectedRows.data.length ? (\n          <TableToolbarSelect\n            options={this.options}\n            selectedRows={selectedRows}\n            onRowsDelete={this.selectRowDelete}\n            displayData={displayData}\n            selectRowUpdate={this.selectRowUpdate}\n          />\n        ) : (\n          showToolbar && (\n            <TableToolbar\n              columns={columns}\n              displayData={displayData}\n              data={data}\n              filterData={filterData}\n              filterList={filterList}\n              filterUpdate={this.filterUpdate}\n              options={this.options}\n              resetFilters={this.resetFilters}\n              searchText={searchText}\n              searchTextUpdate={this.searchTextUpdate}\n              tableRef={this.getTableContentRef}\n              title={title}\n              color={color}\n              toggleViewColumn={this.toggleViewColumn}\n              setTableAction={this.setTableAction}\n            />\n          )\n        )}\n        <TableFilterList\n          options={this.options}\n          filterListRenderers={columns.map(c => {\n            return c.customFilterListRender ? c.customFilterListRender : f => f;\n          })}\n          filterList={filterList}\n          filterUpdate={this.filterUpdate}\n          columnNames={columnNames}\n        />\n        <div\n          style={{ position: 'relative' }}\n          className={this.options.responsive === 'scroll' ? classes.responsiveScroll : null}>\n          {this.options.resizableColumns && (\n            <TableResize\n              key={rowCount}\n              updateDividers={fn => (this.updateDividers = fn)}\n              setResizeable={fn => (this.setHeadResizeable = fn)}\n            />\n          )}\n          <MuiTable ref={el => (this.tableRef = el)} tabIndex={'0'} role={'grid'} className={classes.tableRoot}>\n            <caption className={classes.caption}>{title}</caption>\n            <TableHead\n              columns={columns}\n              activeColumn={activeColumn}\n              data={displayData}\n              count={rowCount}\n              columns={columns}\n              page={page}\n              rowsPerPage={rowsPerPage}\n              handleHeadUpdateRef={fn => (this.updateToolbarSelect = fn)}\n              selectedRows={selectedRows}\n              selectRowUpdate={this.selectRowUpdate}\n              toggleSort={this.toggleSortColumn}\n              setCellRef={this.setHeadCellRef}\n              options={this.options}\n            />\n            <TableBody\n              data={displayData}\n              count={rowCount}\n              columns={columns}\n              page={page}\n              rowsPerPage={rowsPerPage}\n              selectedRows={selectedRows}\n              selectRowUpdate={this.selectRowUpdate}\n              expandedRows={expandedRows}\n              toggleExpandRow={this.toggleExpandRow}\n              options={this.options}\n              filterList={filterList}\n            />\n          </MuiTable>\n        </div>\n        <TableFooter\n          options={this.options}\n          page={page}\n          rowCount={rowCount}\n          rowsPerPageOptions={this.options.rowsPerPageOptions}\n          rowsPerPage={rowsPerPage}\n          changeRowsPerPage={this.changeRowsPerPage}\n          changePage={this.changePage}\n        />\n        <div className={classes.liveAnnounce} aria-live={'polite'} ref={el => (this.announceRef = el)}>\n          {announceText}\n        </div>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(defaultTableStyles, { name: 'MUIDataTable' })(MUIDataTable);\n"],"names":["Popover","state","handleClick","anchorEl","findDOMNode","_this","setState","open","handleRequestClose","cb","handleOnExit","props","refExit","this","refClose","prevProps","prevState","popoverActions","updatePosition","trigger","className","placement","content","providedProps","triggerEl","React","cloneElement","_this2","el","onClick","Fragment","actions","popoverEl","Component","defaultFilterStyles","theme","palette","background","default","text","primary","secondary","main","TableFilter","handleCheckboxChange","index","value","column","onFilterUpdate","handleDropdownChange","event","labelFilterAll","options","textLabels","filter","all","target","handleMultiselectChange","handleTextFieldChange","classes","filterData","filterList","key","cols","item","xs","variant","checkboxListTitle","label","container","map","filterValue","filterIndex","FormControlLabel","checkboxFormControl","checkboxFormControlLabel","Checkbox","checkboxIcon","bind","name","indexOf","checkbox","checked","toString","selectRoot","selectFormControl","htmlFor","_this3","Input","id","textFieldRoot","textFieldFormControl","TextField","_this4","selected","join","_this5","ListItemText","columns","onFilterReset","filterGridColumns","col","length","root","header","reset","classNames","title","resetLink","filtersSelected","cellHeight","filterType","_this6","renderCheckbox","renderMultiselect","renderTextField","renderSelect","withStyles","defaultViewColStyles","TableViewCol","handleColChange","onColumnUpdate","viewColumns","component","aria-label","titleAria","formGroup","display","formControl","checkboxRoot","defaultSearchStyles","transitions","create","TableSearch","handleTextChange","onSearchChange","onSearch","onKeyDown","keyCode","onHide","addEventListener","removeEventListener","initialSearchText","appear","in","timeout","ref","rootRef","SearchIcon","searchIcon","InputBase","searchInput","defaultValue","searchField","ClearIcon","clearIcon","styles","style","StyledComponent","WrappedComponent","passThroughProps","styled","customProps","FinalComponent","defaultStyles","merge","otherProps","HOCProps","buildMap","rows","reduce","accum","dataIndex","getCollatorComparator","Intl","Collator","undefined","numeric","sensitivity","compare","a","b","localeCompare","sortCompare","order","data","createCSVDownload","replaceDoubleQuoteInString","columnData","replace","buildHead","soFar","download","downloadOptions","separator","slice","CSVHead","buildBody","row","_","trim","CSVBody","csv","onDownload","blob","Blob","type","navigator","msSaveOrOpenBlob","filename","dataURI","URL","window","webkitURL","downloadURI","createObjectURL","link","document","createElement","setAttribute","body","appendChild","click","removeChild","defaultToolbarStyles","color","marginLeft","responsive","responsiveToolbarStyles","breakpoints","down","TableToolbar","Boolean","searchText","handleCSVDownload","setActiveIcon","isSearchShown","iconName","nextVal","showSearch","onSearchClose","getActiveIcon","iconActive","icon","onSearchOpen","setTableAction","hideSearch","searchTextUpdate","searchButton","focus","handleSearch","filterUpdate","resetFilters","toggleViewColumn","tableRef","toolbar","search","downloadCsv","print","filterTable","role","paperHeader","backgroundColor","left","titleRoot","aria-hidden","titleText","disableFocusListener","iconWhite","DownloadIcon","ReactToPrint","PrintIcon","ViewColumnIcon","paper","filterPaper","FilterIcon","customToolbar","defaultToolbarSelectStyles","spacing","unit","TableToolbarSelect","handleCustomSelectedRows","Array","isArray","selectedRows","TypeError","some","selectableRows","Error","selectRowUpdate","onRowsDelete","displayData","customToolbarSelect","delete","iconButton","deleteAria","DeleteIcon","deleteIcon","defaultFilterListStyles","TableFilterList","filterListRenderers","columnNames","colIndex","Chip","chip","defaultBodyCellStyles","TableBodyCell","children","rowIndex","onCellClick","columnHeader","cellHide","cellStacked","responsiveStacked","defaultBodyRowStyles","cursor","TableBodyRow","rowSelected","rest","rowHover","hover","hoverCursor","selectableRowsOnClick","expandableRowsOnClick","defaultSelectCellStyles","TableSelectCell","fixedHeader","isHeaderCell","expandableOn","selectableOn","isRowExpanded","onExpand","isRowSelectable","cellClass","headerCell","iconClass","hide","expanded","padding","alignItems","KeyboardArrowRight","disabled","defaultProps","defaultBodyStyles","TableBody","handleRowSelect","handleRowClick","nodeName","parentNode","onRowClick","warn","startsWith","selectRow","expandableRows","expandRow","toggleExpandRow","page","rowsPerPage","count","serverSide","totalPages","Math","floor","fromIndex","toIndex","min","push","lookup","expandedRows","tableRows","buildRows","visibleColCnt","c","customRowRender","setRowProps","isRowSelected","getRowIndex","columnIndex","setCellProps","renderExpandableRow","emptyTitle","noMatch","defaultResizeStyles","TableResize","handleResize","innerWidth","windowWidth","setDividers","setCellRefs","cellsRef","getBoundingClientRect","tableWidth","width","tableHeight","height","priorPosition","resizeCoords","Object","entries","forEach","elRect","elStyle","getComputedStyle","oldLeft","newLeft","offsetWidth","parseInt","paddingLeft","updateWidths","lastPosition","newWidth","Number","toFixed","thCell","onResizeStart","e","isResize","startPosition","clientX","onResizeMove","leftPos","curCoord","newResizeCoords","onResizeEnd","setResizeable","updateDividers","updateCoords","val","resizer","defaultHeadRowStyles","TableHeadRow","defaultHeadCellStyles","TableHeadCell","handleSortClick","toggleSort","isSortTooltipOpen","isHintTooltipOpen","sortDirection","sort","hint","sortActive","sortLabelProps","direction","scope","toolTip","tooltip","popper","mypopper","handleClickSort","toolButton","sortAction","TableSortLabel","HelpIcon","fontSize","defaultHeadStyles","TableHead","handleToggleColumn","handleHeadUpdateRef","handleUpdateCheck","setCellRef","numSelected","isDeterminate","isChecked","customHeadRender","defaultPaginationStyles","TablePagination","handleRowChange","changeRowsPerPage","handlePageChange","changePage","pagination","MuiTablePagination","caption","from","to","displayRows","previous","next","rowsPerPageOptions","TableFooter","rowCount","customFooter","defaultTableStyles","TABLE_LOAD","TOOLBAR_ITEMS","hasToolbarItem","isUndefined","find","i","MUIDataTable","onTableChange","action","setTableInit","onTableInit","setHeadCellRef","headCellRefs","getTableContentRef","tableContent","current","rawColumns","otherOptions","customBodyRender","customFilterListRender","buildColumns","columnOptions","transformData","empty","obj","split","hasSearchText","toSearch","toFind","caseSensitive","stack","needle","toLowerCase","updateDataCol","changedData","cloneDeep","tableMeta","getTableMeta","funcResult","isValidElement","prevFilterIndex","splice","sortFilterList","comparator","getDisplayData","rowData","tableData","curState","onColumnViewChange","toggleSortColumn","newOrder","pos","orderLabel","getSortDirection","newState","sortedData","sortTable","onColumnSortChange","nextTotalPages","onChangeRowsPerPage","onChangePage","onFilterChange","filterPos","selectRowDelete","selectedMap","cleanRows","setTableData","UPDATE","rowPos","cIndex","selectedRowsLen","isDeselect","arr","d","newRows","onRowsSelect","curSelectedRows","createRef","setHeadResizeable","initializeTable","INITIAL","updateOptions","resizableColumns","getDefaultOptions","setTableOptions","defaultOptions","extra","error","optState","acc","cur","validateOptions","status","callback","sortIndex","element","filterOptions","names","selectedRowsData","rowsSelected","isFiltered","isSearchFound","displayRow","columnDisplay","columnValue","columnVal","filterVal","logic","every","searchable","customSearch","customSearchResult","computeDisplayRow","dataSrc","customSort","sIndex","_this7","position","announceText","activeColumn","showToolbar","elevation","paperBody","f","responsiveScroll","_this8","fn","tabIndex","tableRoot","updateToolbarSelect","liveAnnounce","aria-live","announceRef"],"mappings":"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"}